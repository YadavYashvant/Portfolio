<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/composeApp/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/build.gradle.kts" />
              <option name="originalContent" value="import org.jetbrains.compose.desktop.application.dsl.TargetFormat&#10;import org.jetbrains.kotlin.gradle.ExperimentalWasmDsl&#10;import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig&#10;&#10;plugins {&#10;    alias(libs.plugins.kotlinMultiplatform)&#10;    alias(libs.plugins.composeMultiplatform)&#10;    alias(libs.plugins.composeCompiler)&#10;}&#10;&#10;kotlin {&#10;    @OptIn(ExperimentalWasmDsl::class)&#10;    wasmJs {&#10;        outputModuleName.set(&quot;composeApp&quot;)&#10;        browser {&#10;            val rootDirPath = project.rootDir.path&#10;            val projectDirPath = project.projectDir.path&#10;            commonWebpackConfig {&#10;                outputFileName = &quot;composeApp.js&quot;&#10;                devServer = (devServer ?: KotlinWebpackConfig.DevServer()).apply {&#10;                    static = (static ?: mutableListOf()).apply {&#10;                        // Serve sources to debug inside browser&#10;                        add(rootDirPath)&#10;                        add(projectDirPath)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        binaries.executable()&#10;    }&#10;    &#10;    sourceSets {&#10;        commonMain.dependencies {&#10;            implementation(compose.runtime)&#10;            implementation(compose.foundation)&#10;            implementation(compose.material3)&#10;            implementation(compose.materialIconsExtended)&#10;            implementation(compose.ui)&#10;            implementation(compose.components.resources)&#10;            implementation(compose.components.uiToolingPreview)&#10;            implementation(libs.androidx.lifecycle.viewmodelCompose)&#10;            implementation(libs.androidx.lifecycle.runtimeCompose)&#10;        }&#10;        commonTest.dependencies {&#10;            implementation(libs.kotlin.test)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import org.jetbrains.compose.desktop.application.dsl.TargetFormat&#10;import org.jetbrains.kotlin.gradle.ExperimentalWasmDsl&#10;import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig&#10;&#10;plugins {&#10;    alias(libs.plugins.kotlinMultiplatform)&#10;    alias(libs.plugins.composeMultiplatform)&#10;    alias(libs.plugins.composeCompiler)&#10;}&#10;&#10;kotlin {&#10;    @OptIn(ExperimentalWasmDsl::class)&#10;    wasmJs {&#10;        outputModuleName.set(&quot;composeApp&quot;)&#10;        browser {&#10;            val rootDirPath = project.rootDir.path&#10;            val projectDirPath = project.projectDir.path&#10;            commonWebpackConfig {&#10;                outputFileName = &quot;composeApp.js&quot;&#10;                devServer = (devServer ?: KotlinWebpackConfig.DevServer()).apply {&#10;                    static = (static ?: mutableListOf()).apply {&#10;                        // Serve sources to debug inside browser&#10;                        add(rootDirPath)&#10;                        add(projectDirPath)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        binaries.executable()&#10;    }&#10;    &#10;    sourceSets {&#10;        commonMain.dependencies {&#10;            implementation(compose.runtime)&#10;            implementation(compose.foundation)&#10;            implementation(compose.material3)&#10;            implementation(compose.materialIconsExtended)&#10;            implementation(compose.ui)&#10;            implementation(compose.components.resources)&#10;            implementation(compose.components.uiToolingPreview)&#10;        }&#10;        commonTest.dependencies {&#10;            implementation(libs.kotlin.test)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/App.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/App.kt" />
              <option name="originalContent" value="package org.yashvant.portofolio&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.safeContentPadding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import org.jetbrains.compose.resources.painterResource&#10;&#10;import portfolio.composeapp.generated.resources.Res&#10;import portfolio.composeapp.generated.resources.compose_multiplatform&#10;&#10;@Composable&#10;fun App() {&#10;    MaterialTheme {&#10;        var showContent by remember { mutableStateOf(false) }&#10;        Column(&#10;            modifier = Modifier&#10;                .background(MaterialTheme.colorScheme.primaryContainer)&#10;                .safeContentPadding()&#10;                .fillMaxSize(),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;        ) {&#10;            Button(onClick = { showContent = !showContent }) {&#10;                Text(&quot;Click me!&quot;)&#10;            }&#10;            AnimatedVisibility(showContent) {&#10;                val greeting = remember { Greeting().greet() }&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                ) {&#10;                    Image(painterResource(Res.drawable.compose_multiplatform), null)&#10;                    Text(&quot;Compose: $greeting&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.yashvant.portofolio&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;@Composable&#10;fun App() {&#10;    PortfolioRootView()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/PortfolioRootView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/PortfolioRootView.kt" />
              <option name="originalContent" value="package org.yashvant.portofolio&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import org.yashvant.portofolio.ui.components.*&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;import org.yashvant.portofolio.ui.theme.DarculaTheme&#10;import org.yashvant.portofolio.viewmodel.PortfolioViewModel&#10;import org.yashvant.portofolio.data.FileType&#10;import org.yashvant.portofolio.data.Project&#10;&#10;@Composable&#10;fun PortfolioRootView() {&#10;    val viewModel = remember { PortfolioViewModel() }&#10;&#10;    val fileTree by viewModel.fileTree&#10;    val openTabs by viewModel.openTabs&#10;    val activeTab by viewModel.activeTab&#10;    val showProjectDialog by viewModel.showProjectDialog&#10;    val selectedProject by viewModel.selectedProject&#10;&#10;    DarculaTheme {&#10;        BoxWithConstraints(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(DarculaColors.Background)&#10;        ) {&#10;            val isCompact = maxWidth &lt; 800.dp&#10;&#10;            if (isCompact) {&#10;                // Mobile layout - vertical stacking with collapsible explorer&#10;                MobileLayout(&#10;                    viewModel = viewModel,&#10;                    fileTree = fileTree,&#10;                    openTabs = openTabs,&#10;                    activeTab = activeTab,&#10;                    showProjectDialog = showProjectDialog,&#10;                    selectedProject = selectedProject&#10;                )&#10;            } else {&#10;                // Desktop layout - horizontal split&#10;                DesktopLayout(&#10;                    viewModel = viewModel,&#10;                    fileTree = fileTree,&#10;                    openTabs = openTabs,&#10;                    activeTab = activeTab,&#10;                    showProjectDialog = showProjectDialog,&#10;                    selectedProject = selectedProject&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MobileLayout(&#10;    viewModel: PortfolioViewModel,&#10;    fileTree: FileNode,&#10;    openTabs: List&lt;TabItem&gt;,&#10;    activeTab: FileNode?,&#10;    showProjectDialog: Boolean,&#10;    selectedProject: Project?&#10;) {&#10;    var showExplorer by remember { mutableStateOf(false) }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Mobile header with menu button&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(DarculaColors.SurfaceVariant)&#10;                .padding(12.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = { showExplorer = !showExplorer }) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Menu,&#10;                    contentDescription = &quot;Toggle Explorer&quot;,&#10;                    tint = DarculaColors.OnSurface&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = &quot;Yashvant Yadav Portfolio&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(48.dp)) // Balance the layout&#10;        }&#10;&#10;        if (showExplorer) {&#10;            // Full-screen explorer overlay on mobile&#10;            FileExplorerView(&#10;                fileTree = fileTree,&#10;                onFileClicked = { file -&gt;&#10;                    viewModel.onFileClicked(file)&#10;                    if (file.type != FileType.FOLDER) {&#10;                        showExplorer = false // Hide explorer after file selection&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxSize()&#10;            )&#10;        } else {&#10;            // Editor view&#10;            EditorView(&#10;                openTabs = openTabs,&#10;                activeTab = activeTab,&#10;                onTabClicked = viewModel::onTabClicked,&#10;                onTabClosed = viewModel::onTabClosed,&#10;                onRunProject = viewModel::onRunProjectClicked,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;&#10;            // Mobile status bar&#10;            StatusBar()&#10;        }&#10;    }&#10;&#10;    // Project Demo Dialog&#10;    if (showProjectDialog) {&#10;        val currentProject = selectedProject&#10;        if (currentProject != null) {&#10;            ProjectDemoDialog(&#10;                project = currentProject,&#10;                onDismiss = viewModel::onCloseProjectDialog&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DesktopLayout(&#10;    viewModel: PortfolioViewModel,&#10;    fileTree: FileNode,&#10;    openTabs: List&lt;TabItem&gt;,&#10;    activeTab: FileNode?,&#10;    showProjectDialog: Boolean,&#10;    selectedProject: Project?&#10;) {&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Main IDE layout&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .weight(1f)&#10;        ) {&#10;            // File Explorer (left panel)&#10;            FileExplorerView(&#10;                fileTree = fileTree,&#10;                onFileClicked = viewModel::onFileClicked&#10;            )&#10;&#10;            // Editor View (right panel)&#10;            EditorView(&#10;                openTabs = openTabs,&#10;                activeTab = activeTab,&#10;                onTabClicked = viewModel::onTabClicked,&#10;                onTabClosed = viewModel::onTabClosed,&#10;                onRunProject = viewModel::onRunProjectClicked,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;&#10;        // Status Bar&#10;        StatusBar()&#10;    }&#10;&#10;    // Project Demo Dialog&#10;    if (showProjectDialog) {&#10;        val currentProject = selectedProject&#10;        if (currentProject != null) {&#10;            ProjectDemoDialog(&#10;                project = currentProject,&#10;                onDismiss = viewModel::onCloseProjectDialog&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusBar() {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(24.dp)&#10;            .background(DarculaColors.StatusBar)&#10;            .border(1.dp, DarculaColors.TabBorder)&#10;            .padding(horizontal = 12.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = &quot;Yashvant Yadav - Android Developer Portfolio&quot;,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Text(&#10;            text = &quot;Kotlin/Wasm | Compose for Web&quot;,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = DarculaColors.Comment&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.yashvant.portofolio&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import org.yashvant.portofolio.ui.components.*&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;import org.yashvant.portofolio.ui.theme.DarculaTheme&#10;import org.yashvant.portofolio.viewmodel.PortfolioViewModel&#10;import org.yashvant.portofolio.data.*&#10;&#10;@Composable&#10;fun PortfolioRootView() {&#10;    val viewModel = remember { PortfolioViewModel() }&#10;&#10;    val fileTree by viewModel.fileTree&#10;    val openTabs by viewModel.openTabs&#10;    val activeTab by viewModel.activeTab&#10;    val showProjectDialog by viewModel.showProjectDialog&#10;    val selectedProject by viewModel.selectedProject&#10;&#10;    DarculaTheme {&#10;        BoxWithConstraints(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(DarculaColors.Background)&#10;        ) {&#10;            val isCompact = maxWidth &lt; 800.dp&#10;&#10;            if (isCompact) {&#10;                // Mobile layout - vertical stacking with collapsible explorer&#10;                MobileLayout(&#10;                    viewModel = viewModel,&#10;                    fileTree = fileTree,&#10;                    openTabs = openTabs,&#10;                    activeTab = activeTab,&#10;                    showProjectDialog = showProjectDialog,&#10;                    selectedProject = selectedProject&#10;                )&#10;            } else {&#10;                // Desktop layout - horizontal split&#10;                DesktopLayout(&#10;                    viewModel = viewModel,&#10;                    fileTree = fileTree,&#10;                    openTabs = openTabs,&#10;                    activeTab = activeTab,&#10;                    showProjectDialog = showProjectDialog,&#10;                    selectedProject = selectedProject&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MobileLayout(&#10;    viewModel: PortfolioViewModel,&#10;    fileTree: FileNode,&#10;    openTabs: List&lt;TabItem&gt;,&#10;    activeTab: FileNode?,&#10;    showProjectDialog: Boolean,&#10;    selectedProject: Project?&#10;) {&#10;    var showExplorer by remember { mutableStateOf(false) }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Mobile header with menu button&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(DarculaColors.SurfaceVariant)&#10;                .padding(12.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = { showExplorer = !showExplorer }) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Menu,&#10;                    contentDescription = &quot;Toggle Explorer&quot;,&#10;                    tint = DarculaColors.OnSurface&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = &quot;Yashvant Yadav Portfolio&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(48.dp)) // Balance the layout&#10;        }&#10;&#10;        if (showExplorer) {&#10;            // Full-screen explorer overlay on mobile&#10;            FileExplorerView(&#10;                fileTree = fileTree,&#10;                onFileClicked = { file -&gt;&#10;                    viewModel.onFileClicked(file)&#10;                    if (file.type != FileType.FOLDER) {&#10;                        showExplorer = false // Hide explorer after file selection&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxSize()&#10;            )&#10;        } else {&#10;            // Editor view&#10;            EditorView(&#10;                openTabs = openTabs,&#10;                activeTab = activeTab,&#10;                onTabClicked = viewModel::onTabClicked,&#10;                onTabClosed = viewModel::onTabClosed,&#10;                onRunProject = viewModel::onRunProjectClicked,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;&#10;            // Mobile status bar&#10;            StatusBar()&#10;        }&#10;    }&#10;&#10;    // Project Demo Dialog&#10;    if (showProjectDialog) {&#10;        val currentProject = selectedProject&#10;        if (currentProject != null) {&#10;            ProjectDemoDialog(&#10;                project = currentProject,&#10;                onDismiss = viewModel::onCloseProjectDialog&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DesktopLayout(&#10;    viewModel: PortfolioViewModel,&#10;    fileTree: FileNode,&#10;    openTabs: List&lt;TabItem&gt;,&#10;    activeTab: FileNode?,&#10;    showProjectDialog: Boolean,&#10;    selectedProject: Project?&#10;) {&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Main IDE layout&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .weight(1f)&#10;        ) {&#10;            // File Explorer (left panel)&#10;            FileExplorerView(&#10;                fileTree = fileTree,&#10;                onFileClicked = viewModel::onFileClicked&#10;            )&#10;&#10;            // Editor View (right panel)&#10;            EditorView(&#10;                openTabs = openTabs,&#10;                activeTab = activeTab,&#10;                onTabClicked = viewModel::onTabClicked,&#10;                onTabClosed = viewModel::onTabClosed,&#10;                onRunProject = viewModel::onRunProjectClicked,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;&#10;        // Status Bar&#10;        StatusBar()&#10;    }&#10;&#10;    // Project Demo Dialog&#10;    if (showProjectDialog) {&#10;        val currentProject = selectedProject&#10;        if (currentProject != null) {&#10;            ProjectDemoDialog(&#10;                project = currentProject,&#10;                onDismiss = viewModel::onCloseProjectDialog&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusBar() {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(24.dp)&#10;            .background(DarculaColors.StatusBar)&#10;            .border(1.dp, DarculaColors.TabBorder)&#10;            .padding(horizontal = 12.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = &quot;Yashvant Yadav - Android Developer Portfolio&quot;,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Text(&#10;            text = &quot;Kotlin/Wasm | Compose for Web&quot;,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = DarculaColors.Comment&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/EditorView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/EditorView.kt" />
              <option name="originalContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import org.yashvant.portofolio.data.FileNode&#10;import org.yashvant.portofolio.data.FileType&#10;import org.yashvant.portofolio.data.Project&#10;import org.yashvant.portofolio.data.TabItem&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun EditorView(&#10;    openTabs: List&lt;TabItem&gt;,&#10;    activeTab: FileNode?,&#10;    onTabClicked: (FileNode) -&gt; Unit,&#10;    onTabClosed: (FileNode) -&gt; Unit,&#10;    onRunProject: (Project) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    BoxWithConstraints(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(DarculaColors.Background)&#10;    ) {&#10;        val isMobile = maxWidth &lt; 600.dp&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // Tab bar&#10;            if (openTabs.isNotEmpty()) {&#10;                TabBar(&#10;                    tabs = openTabs,&#10;                    isMobile = isMobile,&#10;                    onTabClicked = onTabClicked,&#10;                    onTabClosed = onTabClosed&#10;                )&#10;            }&#10;&#10;            // Editor content&#10;            if (activeTab != null) {&#10;                EditorContent(&#10;                    fileNode = activeTab,&#10;                    isMobile = isMobile,&#10;                    onRunProject = onRunProject,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            } else {&#10;                WelcomeScreen(&#10;                    isMobile = isMobile,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TabBar(&#10;    tabs: List&lt;TabItem&gt;,&#10;    isMobile: Boolean,&#10;    onTabClicked: (FileNode) -&gt; Unit,&#10;    onTabClosed: (FileNode) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(DarculaColors.TabInactive)&#10;            .border(1.dp, DarculaColors.TabBorder),&#10;        contentPadding = if (isMobile) PaddingValues(horizontal = 4.dp) else PaddingValues(0.dp)&#10;    ) {&#10;        items(tabs) { tab -&gt;&#10;            Tab(&#10;                tab = tab,&#10;                isMobile = isMobile,&#10;                onClicked = { onTabClicked(tab.fileNode) },&#10;                onClosed = { onTabClosed(tab.fileNode) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun Tab(&#10;    tab: TabItem,&#10;    isMobile: Boolean,&#10;    onClicked: () -&gt; Unit,&#10;    onClosed: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (tab.isActive) DarculaColors.TabActive else DarculaColors.TabInactive&#10;    val tabPadding = if (isMobile)&#10;        PaddingValues(horizontal = 16.dp, vertical = 12.dp)&#10;    else&#10;        PaddingValues(horizontal = 12.dp, vertical = 8.dp)&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .background(backgroundColor)&#10;            .clickable { onClicked() }&#10;            .padding(tabPadding)&#10;            .border(&#10;                width = if (tab.isActive) 0.dp else 1.dp,&#10;                color = DarculaColors.TabBorder&#10;            ),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = getTabIcon(tab.fileNode),&#10;            contentDescription = null,&#10;            tint = getTabIconColor(tab.fileNode),&#10;            modifier = Modifier.size(if (isMobile) 16.dp else 14.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.width(if (isMobile) 8.dp else 6.dp))&#10;&#10;        Text(&#10;            text = tab.fileNode.name,&#10;            style = if (isMobile) MaterialTheme.typography.bodyLarge else MaterialTheme.typography.bodyMedium,&#10;            color = if (tab.isActive) DarculaColors.OnSurface else DarculaColors.Comment,&#10;            maxLines = 1,&#10;            overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;        )&#10;&#10;        Spacer(modifier = Modifier.width(if (isMobile) 12.dp else 8.dp))&#10;&#10;        IconButton(&#10;            onClick = onClosed,&#10;            modifier = Modifier.size(if (isMobile) 24.dp else 16.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Close,&#10;                contentDescription = &quot;Close tab&quot;,&#10;                tint = DarculaColors.Comment,&#10;                modifier = Modifier.size(if (isMobile) 16.dp else 12.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EditorContent(&#10;    fileNode: FileNode,&#10;    isMobile: Boolean,&#10;    onRunProject: (Project) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(DarculaColors.Background)&#10;    ) {&#10;        // File header with run button&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(DarculaColors.SurfaceVariant)&#10;                .padding(if (isMobile) 12.dp else 8.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Icon(&#10;                    imageVector = getTabIcon(fileNode),&#10;                    contentDescription = null,&#10;                    tint = getTabIconColor(fileNode),&#10;                    modifier = Modifier.size(if (isMobile) 20.dp else 16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = fileNode.name,&#10;                    style = if (isMobile) MaterialTheme.typography.titleMedium else MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = DarculaColors.OnSurface,&#10;                    maxLines = 1,&#10;                    overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;                )&#10;            }&#10;&#10;            if (fileNode.hasRunButton &amp;&amp; fileNode.project != null) {&#10;                Button(&#10;                    onClick = { onRunProject(fileNode.project) },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = DarculaColors.Primary&#10;                    ),&#10;                    modifier = Modifier.height(if (isMobile) 40.dp else 32.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Run&quot;,&#10;                        modifier = Modifier.size(if (isMobile) 20.dp else 16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        &quot;Run&quot;,&#10;                        style = if (isMobile) MaterialTheme.typography.bodyLarge else MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // File content&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(if (isMobile) 12.dp else 16.dp)&#10;        ) {&#10;            items(fileNode.content.lines()) { line -&gt;&#10;                CodeLine(&#10;                    line = line,&#10;                    isMobile = isMobile&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CodeLine(line: String, isMobile: Boolean) {&#10;    val annotatedText = buildAnnotatedString {&#10;        if (line.isBlank()) {&#10;            append(&quot; &quot;)&#10;        } else {&#10;            applySyntaxHighlighting(line)&#10;        }&#10;    }&#10;&#10;    Text(&#10;        text = annotatedText,&#10;        style = if (isMobile) MaterialTheme.typography.bodyLarge else MaterialTheme.typography.bodyMedium,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = if (isMobile) 2.dp else 1.dp),&#10;        lineHeight = if (isMobile) 24.sp else 20.sp&#10;    )&#10;}&#10;&#10;private fun androidx.compose.ui.text.AnnotatedString.Builder.applySyntaxHighlighting(line: String) {&#10;    when {&#10;        line.trimStart().startsWith(&quot;//&quot;) || line.trimStart().startsWith(&quot;*&quot;) || line.trimStart().startsWith(&quot;/**&quot;) -&gt; {&#10;            // Comments&#10;            withStyle(SpanStyle(color = DarculaColors.Comment)) {&#10;                append(line)&#10;            }&#10;        }&#10;        line.contains(&quot;package &quot;) || line.contains(&quot;import &quot;) -&gt; {&#10;            // Package and import statements&#10;            val parts = line.split(&quot; &quot;)&#10;            parts.forEachIndexed { index, part -&gt;&#10;                when (part) {&#10;                    &quot;package&quot;, &quot;import&quot; -&gt; {&#10;                        withStyle(SpanStyle(color = DarculaColors.Keyword)) {&#10;                            append(part)&#10;                        }&#10;                    }&#10;                    else -&gt; {&#10;                        withStyle(SpanStyle(color = DarculaColors.OnBackground)) {&#10;                            append(part)&#10;                        }&#10;                    }&#10;                }&#10;                if (index &lt; parts.size - 1) append(&quot; &quot;)&#10;            }&#10;        }&#10;        else -&gt; {&#10;            // General syntax highlighting&#10;            highlightKotlinSyntax(line)&#10;        }&#10;    }&#10;}&#10;&#10;private fun androidx.compose.ui.text.AnnotatedString.Builder.highlightKotlinSyntax(line: String) {&#10;    val keywords = setOf(&#10;        &quot;class&quot;, &quot;object&quot;, &quot;interface&quot;, &quot;fun&quot;, &quot;val&quot;, &quot;var&quot;, &quot;if&quot;, &quot;else&quot;, &quot;when&quot;, &quot;for&quot;, &quot;while&quot;,&#10;        &quot;return&quot;, &quot;package&quot;, &quot;import&quot;, &quot;data&quot;, &quot;sealed&quot;, &quot;enum&quot;, &quot;companion&quot;, &quot;const&quot;, &quot;private&quot;,&#10;        &quot;public&quot;, &quot;internal&quot;, &quot;protected&quot;, &quot;override&quot;, &quot;open&quot;, &quot;abstract&quot;, &quot;final&quot;, &quot;suspend&quot;&#10;    )&#10;&#10;    val tokens = line.split(Regex(&quot;\\s+|(?=[{}()\\[\\];,.])|(?&lt;=[{}()\\[\\];,.])&quot;)).filter { it.isNotEmpty() }&#10;    var currentIndex = 0&#10;&#10;    for (token in tokens) {&#10;        val tokenStart = line.indexOf(token, currentIndex)&#10;        if (tokenStart &gt; currentIndex) {&#10;            // Add whitespace before token&#10;            append(line.substring(currentIndex, tokenStart))&#10;        }&#10;&#10;        when {&#10;            keywords.contains(token) -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.Keyword, fontWeight = FontWeight.Bold)) {&#10;                    append(token)&#10;                }&#10;            }&#10;            token.startsWith(&quot;\&quot;&quot;) &amp;&amp; token.endsWith(&quot;\&quot;&quot;) -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.String)) {&#10;                    append(token)&#10;                }&#10;            }&#10;            token.matches(Regex(&quot;\\d+&quot;)) -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.Number)) {&#10;                    append(token)&#10;                }&#10;            }&#10;            token.matches(Regex(&quot;[A-Z][a-zA-Z0-9]*&quot;)) -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.Type)) {&#10;                    append(token)&#10;                }&#10;            }&#10;            else -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.OnBackground)) {&#10;                    append(token)&#10;                }&#10;            }&#10;        }&#10;&#10;        currentIndex = tokenStart + token.length&#10;    }&#10;&#10;    // Add any remaining characters&#10;    if (currentIndex &lt; line.length) {&#10;        append(line.substring(currentIndex))&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WelcomeScreen(isMobile: Boolean, modifier: Modifier = Modifier) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(if (isMobile) 24.dp else 32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Code,&#10;            contentDescription = null,&#10;            tint = DarculaColors.Primary,&#10;            modifier = Modifier.size(if (isMobile) 80.dp else 64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(if (isMobile) 20.dp else 16.dp))&#10;&#10;        Text(&#10;            text = &quot;Yashvant Yadav Portfolio&quot;,&#10;            style = if (isMobile) MaterialTheme.typography.displayLarge else MaterialTheme.typography.displayMedium,&#10;            color = DarculaColors.OnBackground,&#10;            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(if (isMobile) 12.dp else 8.dp))&#10;&#10;        Text(&#10;            text = &quot;Android Developer&quot;,&#10;            style = if (isMobile) MaterialTheme.typography.titleMedium else MaterialTheme.typography.bodyLarge,&#10;            color = DarculaColors.Comment&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(if (isMobile) 32.dp else 24.dp))&#10;&#10;        Text(&#10;            text = if (isMobile) &quot;Tap the menu to explore files&quot; else &quot;Select a file from the explorer to get started&quot;,&#10;            style = if (isMobile) MaterialTheme.typography.bodyLarge else MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.Comment,&#10;            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;private fun getTabIcon(fileNode: FileNode) = when {&#10;    fileNode.type == FileType.FOLDER -&gt; Icons.Default.Folder&#10;    fileNode.name.endsWith(&quot;.kt&quot;) -&gt; Icons.Default.Code&#10;    fileNode.name.endsWith(&quot;.md&quot;) -&gt; Icons.Default.Description&#10;    else -&gt; Icons.Default.InsertDriveFile&#10;}&#10;&#10;private fun getTabIconColor(fileNode: FileNode) = when {&#10;    fileNode.type == FileType.FOLDER -&gt; DarculaColors.FolderIcon&#10;    fileNode.name.endsWith(&quot;.kt&quot;) -&gt; DarculaColors.KotlinFileIcon&#10;    fileNode.name.endsWith(&quot;.md&quot;) -&gt; DarculaColors.MarkdownFileIcon&#10;    else -&gt; DarculaColors.OnSurface&#10;}&#10;" />
              <option name="updatedContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import org.yashvant.portofolio.data.FileNode&#10;import org.yashvant.portofolio.data.FileType&#10;import org.yashvant.portofolio.data.Project&#10;import org.yashvant.portofolio.data.TabItem&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun EditorView(&#10;    openTabs: List&lt;TabItem&gt;,&#10;    activeTab: FileNode?,&#10;    onTabClicked: (FileNode) -&gt; Unit,&#10;    onTabClosed: (FileNode) -&gt; Unit,&#10;    onRunProject: (Project) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    BoxWithConstraints(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(DarculaColors.Background)&#10;    ) {&#10;        val isMobile = maxWidth &lt; 600.dp&#10;        val isLaptop = maxWidth &gt;= 600.dp &amp;&amp; maxWidth &lt; 1200.dp&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // Tab bar&#10;            if (openTabs.isNotEmpty()) {&#10;                TabBar(&#10;                    tabs = openTabs,&#10;                    isMobile = isMobile,&#10;                    isLaptop = isLaptop,&#10;                    onTabClicked = onTabClicked,&#10;                    onTabClosed = onTabClosed&#10;                )&#10;            }&#10;&#10;            // Editor content&#10;            if (activeTab != null) {&#10;                EditorContent(&#10;                    fileNode = activeTab,&#10;                    isMobile = isMobile,&#10;                    isLaptop = isLaptop,&#10;                    onRunProject = onRunProject,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            } else {&#10;                WelcomeScreen(&#10;                    isMobile = isMobile,&#10;                    isLaptop = isLaptop,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TabBar(&#10;    tabs: List&lt;TabItem&gt;,&#10;    isMobile: Boolean,&#10;    isLaptop: Boolean,&#10;    onTabClicked: (FileNode) -&gt; Unit,&#10;    onTabClosed: (FileNode) -&gt; Unit&#10;) {&#10;    LazyRow(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(DarculaColors.TabInactive)&#10;            .border(1.dp, DarculaColors.TabBorder),&#10;        contentPadding = if (isMobile) PaddingValues(horizontal = 4.dp) else PaddingValues(0.dp)&#10;    ) {&#10;        items(tabs) { tab -&gt;&#10;            Tab(&#10;                tab = tab,&#10;                isMobile = isMobile,&#10;                isLaptop = isLaptop,&#10;                onClicked = { onTabClicked(tab.fileNode) },&#10;                onClosed = { onTabClosed(tab.fileNode) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun Tab(&#10;    tab: TabItem,&#10;    isMobile: Boolean,&#10;    isLaptop: Boolean,&#10;    onClicked: () -&gt; Unit,&#10;    onClosed: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (tab.isActive) DarculaColors.TabActive else DarculaColors.TabInactive&#10;    val tabPadding = when {&#10;        isMobile -&gt; PaddingValues(horizontal = 16.dp, vertical = 12.dp)&#10;        isLaptop -&gt; PaddingValues(horizontal = 14.dp, vertical = 10.dp)&#10;        else -&gt; PaddingValues(horizontal = 14.dp, vertical = 10.dp)&#10;    }&#10;&#10;    Row(&#10;        modifier = Modifier&#10;            .background(backgroundColor)&#10;            .clickable { onClicked() }&#10;            .padding(tabPadding)&#10;            .border(&#10;                width = if (tab.isActive) 0.dp else 1.dp,&#10;                color = DarculaColors.TabBorder&#10;            ),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = getTabIcon(tab.fileNode),&#10;            contentDescription = null,&#10;            tint = getTabIconColor(tab.fileNode),&#10;            modifier = Modifier.size(&#10;                when {&#10;                    isMobile -&gt; 16.dp&#10;                    isLaptop -&gt; 16.dp&#10;                    else -&gt; 16.dp&#10;                }&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.width(&#10;            when {&#10;                isMobile -&gt; 8.dp&#10;                isLaptop -&gt; 8.dp&#10;                else -&gt; 8.dp&#10;            }&#10;        ))&#10;&#10;        Text(&#10;            text = tab.fileNode.name,&#10;            style = when {&#10;                isMobile -&gt; MaterialTheme.typography.bodyLarge&#10;                isLaptop -&gt; MaterialTheme.typography.titleSmall&#10;                else -&gt; MaterialTheme.typography.titleSmall // Increased from bodyMedium&#10;            },&#10;            color = if (tab.isActive) DarculaColors.OnSurface else DarculaColors.Comment,&#10;            maxLines = 1,&#10;            overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;        )&#10;&#10;        Spacer(modifier = Modifier.width(&#10;            when {&#10;                isMobile -&gt; 12.dp&#10;                isLaptop -&gt; 10.dp&#10;                else -&gt; 10.dp&#10;            }&#10;        ))&#10;&#10;        IconButton(&#10;            onClick = onClosed,&#10;            modifier = Modifier.size(&#10;                when {&#10;                    isMobile -&gt; 24.dp&#10;                    isLaptop -&gt; 20.dp&#10;                    else -&gt; 20.dp&#10;                }&#10;            )&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Close,&#10;                contentDescription = &quot;Close tab&quot;,&#10;                tint = DarculaColors.Comment,&#10;                modifier = Modifier.size(&#10;                    when {&#10;                        isMobile -&gt; 16.dp&#10;                        isLaptop -&gt; 14.dp&#10;                        else -&gt; 14.dp&#10;                    }&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EditorContent(&#10;    fileNode: FileNode,&#10;    isMobile: Boolean,&#10;    isLaptop: Boolean,&#10;    onRunProject: (Project) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(DarculaColors.Background)&#10;    ) {&#10;        // File header with run button&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(DarculaColors.SurfaceVariant)&#10;                .padding(&#10;                    when {&#10;                        isMobile -&gt; 12.dp&#10;                        isLaptop -&gt; 12.dp&#10;                        else -&gt; 12.dp&#10;                    }&#10;                ),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Icon(&#10;                    imageVector = getTabIcon(fileNode),&#10;                    contentDescription = null,&#10;                    tint = getTabIconColor(fileNode),&#10;                    modifier = Modifier.size(&#10;                        when {&#10;                            isMobile -&gt; 20.dp&#10;                            isLaptop -&gt; 18.dp&#10;                            else -&gt; 18.dp&#10;                        }&#10;                    )&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = fileNode.name,&#10;                    style = when {&#10;                        isMobile -&gt; MaterialTheme.typography.titleMedium&#10;                        isLaptop -&gt; MaterialTheme.typography.titleMedium&#10;                        else -&gt; MaterialTheme.typography.titleMedium // Increased from bodyMedium&#10;                    },&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = DarculaColors.OnSurface,&#10;                    maxLines = 1,&#10;                    overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;                )&#10;            }&#10;&#10;            if (fileNode.hasRunButton &amp;&amp; fileNode.project != null) {&#10;                Button(&#10;                    onClick = { onRunProject(fileNode.project) },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = DarculaColors.Primary&#10;                    ),&#10;                    modifier = Modifier.height(&#10;                        when {&#10;                            isMobile -&gt; 40.dp&#10;                            isLaptop -&gt; 36.dp&#10;                            else -&gt; 36.dp&#10;                        }&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.PlayArrow,&#10;                        contentDescription = &quot;Run&quot;,&#10;                        modifier = Modifier.size(&#10;                            when {&#10;                                isMobile -&gt; 20.dp&#10;                                isLaptop -&gt; 18.dp&#10;                                else -&gt; 18.dp&#10;                            }&#10;                        )&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        &quot;Run&quot;,&#10;                        style = when {&#10;                            isMobile -&gt; MaterialTheme.typography.bodyLarge&#10;                            isLaptop -&gt; MaterialTheme.typography.titleSmall&#10;                            else -&gt; MaterialTheme.typography.titleSmall // Increased from bodyMedium&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // File content&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(&#10;                    when {&#10;                        isMobile -&gt; 12.dp&#10;                        isLaptop -&gt; 16.dp&#10;                        else -&gt; 16.dp&#10;                    }&#10;                )&#10;        ) {&#10;            items(fileNode.content.lines()) { line -&gt;&#10;                CodeLine(&#10;                    line = line,&#10;                    isMobile = isMobile,&#10;                    isLaptop = isLaptop&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CodeLine(line: String, isMobile: Boolean, isLaptop: Boolean) {&#10;    val annotatedText = buildAnnotatedString {&#10;        if (line.isBlank()) {&#10;            append(&quot; &quot;)&#10;        } else {&#10;            applySyntaxHighlighting(line)&#10;        }&#10;    }&#10;&#10;    Text(&#10;        text = annotatedText,&#10;        style = when {&#10;            isMobile -&gt; MaterialTheme.typography.bodyLarge&#10;            isLaptop -&gt; MaterialTheme.typography.bodyLarge // Increased from bodyMedium&#10;            else -&gt; MaterialTheme.typography.bodyLarge // Increased from bodyMedium&#10;        },&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(&#10;                vertical = when {&#10;                    isMobile -&gt; 2.dp&#10;                    isLaptop -&gt; 2.dp&#10;                    else -&gt; 2.dp&#10;                }&#10;            ),&#10;        lineHeight = when {&#10;            isMobile -&gt; 24.sp&#10;            isLaptop -&gt; 24.sp // Increased from 20.sp&#10;            else -&gt; 24.sp // Increased from 20.sp&#10;        }&#10;    )&#10;}&#10;&#10;private fun androidx.compose.ui.text.AnnotatedString.Builder.applySyntaxHighlighting(line: String) {&#10;    when {&#10;        line.trimStart().startsWith(&quot;//&quot;) || line.trimStart().startsWith(&quot;*&quot;) || line.trimStart().startsWith(&quot;/**&quot;) -&gt; {&#10;            // Comments&#10;            withStyle(SpanStyle(color = DarculaColors.Comment)) {&#10;                append(line)&#10;            }&#10;        }&#10;        line.contains(&quot;package &quot;) || line.contains(&quot;import &quot;) -&gt; {&#10;            // Package and import statements&#10;            val parts = line.split(&quot; &quot;)&#10;            parts.forEachIndexed { index, part -&gt;&#10;                when (part) {&#10;                    &quot;package&quot;, &quot;import&quot; -&gt; {&#10;                        withStyle(SpanStyle(color = DarculaColors.Keyword)) {&#10;                            append(part)&#10;                        }&#10;                    }&#10;                    else -&gt; {&#10;                        withStyle(SpanStyle(color = DarculaColors.OnBackground)) {&#10;                            append(part)&#10;                        }&#10;                    }&#10;                }&#10;                if (index &lt; parts.size - 1) append(&quot; &quot;)&#10;            }&#10;        }&#10;        else -&gt; {&#10;            // General syntax highlighting&#10;            highlightKotlinSyntax(line)&#10;        }&#10;    }&#10;}&#10;&#10;private fun androidx.compose.ui.text.AnnotatedString.Builder.highlightKotlinSyntax(line: String) {&#10;    val keywords = setOf(&#10;        &quot;class&quot;, &quot;object&quot;, &quot;interface&quot;, &quot;fun&quot;, &quot;val&quot;, &quot;var&quot;, &quot;if&quot;, &quot;else&quot;, &quot;when&quot;, &quot;for&quot;, &quot;while&quot;,&#10;        &quot;return&quot;, &quot;package&quot;, &quot;import&quot;, &quot;data&quot;, &quot;sealed&quot;, &quot;enum&quot;, &quot;companion&quot;, &quot;const&quot;, &quot;private&quot;,&#10;        &quot;public&quot;, &quot;internal&quot;, &quot;protected&quot;, &quot;override&quot;, &quot;open&quot;, &quot;abstract&quot;, &quot;final&quot;, &quot;suspend&quot;&#10;    )&#10;&#10;    val tokens = line.split(Regex(&quot;\\s+|(?=[{}()\\[\\];,.])|(?&lt;=[{}()\\[\\];,.])&quot;)).filter { it.isNotEmpty() }&#10;    var currentIndex = 0&#10;&#10;    for (token in tokens) {&#10;        val tokenStart = line.indexOf(token, currentIndex)&#10;        if (tokenStart &gt; currentIndex) {&#10;            // Add whitespace before token&#10;            append(line.substring(currentIndex, tokenStart))&#10;        }&#10;&#10;        when {&#10;            keywords.contains(token) -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.Keyword, fontWeight = FontWeight.Bold)) {&#10;                    append(token)&#10;                }&#10;            }&#10;            token.startsWith(&quot;\&quot;&quot;) &amp;&amp; token.endsWith(&quot;\&quot;&quot;) -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.String)) {&#10;                    append(token)&#10;                }&#10;            }&#10;            token.matches(Regex(&quot;\\d+&quot;)) -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.Number)) {&#10;                    append(token)&#10;                }&#10;            }&#10;            token.matches(Regex(&quot;[A-Z][a-zA-Z0-9]*&quot;)) -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.Type)) {&#10;                    append(token)&#10;                }&#10;            }&#10;            else -&gt; {&#10;                withStyle(SpanStyle(color = DarculaColors.OnBackground)) {&#10;                    append(token)&#10;                }&#10;            }&#10;        }&#10;&#10;        currentIndex = tokenStart + token.length&#10;    }&#10;&#10;    // Add any remaining characters&#10;    if (currentIndex &lt; line.length) {&#10;        append(line.substring(currentIndex))&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun WelcomeScreen(isMobile: Boolean, isLaptop: Boolean, modifier: Modifier = Modifier) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(&#10;                when {&#10;                    isMobile -&gt; 24.dp&#10;                    isLaptop -&gt; 32.dp&#10;                    else -&gt; 32.dp&#10;                }&#10;            ),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Code,&#10;            contentDescription = null,&#10;            tint = DarculaColors.Primary,&#10;            modifier = Modifier.size(&#10;                when {&#10;                    isMobile -&gt; 80.dp&#10;                    isLaptop -&gt; 72.dp&#10;                    else -&gt; 72.dp&#10;                }&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(&#10;            when {&#10;                isMobile -&gt; 20.dp&#10;                isLaptop -&gt; 18.dp&#10;                else -&gt; 18.dp&#10;            }&#10;        ))&#10;&#10;        Text(&#10;            text = &quot;Yashvant Yadav Portfolio&quot;,&#10;            style = when {&#10;                isMobile -&gt; MaterialTheme.typography.displayLarge&#10;                isLaptop -&gt; MaterialTheme.typography.displayMedium&#10;                else -&gt; MaterialTheme.typography.displayMedium&#10;            },&#10;            color = DarculaColors.OnBackground,&#10;            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(&#10;            when {&#10;                isMobile -&gt; 12.dp&#10;                isLaptop -&gt; 10.dp&#10;                else -&gt; 10.dp&#10;            }&#10;        ))&#10;&#10;        Text(&#10;            text = &quot;Android Developer&quot;,&#10;            style = when {&#10;                isMobile -&gt; MaterialTheme.typography.titleMedium&#10;                isLaptop -&gt; MaterialTheme.typography.titleMedium&#10;                else -&gt; MaterialTheme.typography.titleMedium // Increased from bodyLarge&#10;            },&#10;            color = DarculaColors.Comment&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(&#10;            when {&#10;                isMobile -&gt; 32.dp&#10;                isLaptop -&gt; 28.dp&#10;                else -&gt; 28.dp&#10;            }&#10;        ))&#10;&#10;        Text(&#10;            text = if (isMobile) &quot;Tap the menu to explore files&quot; else &quot;Select a file from the explorer to get started&quot;,&#10;            style = when {&#10;                isMobile -&gt; MaterialTheme.typography.bodyLarge&#10;                isLaptop -&gt; MaterialTheme.typography.bodyLarge // Increased from bodyMedium&#10;                else -&gt; MaterialTheme.typography.bodyLarge // Increased from bodyMedium&#10;            },&#10;            color = DarculaColors.Comment,&#10;            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;private fun getTabIcon(fileNode: FileNode) = when {&#10;    fileNode.type == FileType.FOLDER -&gt; Icons.Default.Folder&#10;    fileNode.name.endsWith(&quot;.kt&quot;) -&gt; Icons.Default.Code&#10;    fileNode.name.endsWith(&quot;.md&quot;) -&gt; Icons.Default.Description&#10;    else -&gt; Icons.Default.InsertDriveFile&#10;}&#10;&#10;private fun getTabIconColor(fileNode: FileNode) = when {&#10;    fileNode.type == FileType.FOLDER -&gt; DarculaColors.FolderIcon&#10;    fileNode.name.endsWith(&quot;.kt&quot;) -&gt; DarculaColors.KotlinFileIcon&#10;    fileNode.name.endsWith(&quot;.md&quot;) -&gt; DarculaColors.MarkdownFileIcon&#10;    else -&gt; DarculaColors.OnSurface&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/FileExplorerView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/FileExplorerView.kt" />
              <option name="originalContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import org.yashvant.portofolio.data.FileNode&#10;import org.yashvant.portofolio.data.FileType&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun FileExplorerView(&#10;    fileTree: FileNode,&#10;    onFileClicked: (FileNode) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxHeight()&#10;            .widthIn(min = 250.dp, max = 350.dp)&#10;            .background(DarculaColors.Surface)&#10;            .border(1.dp, DarculaColors.TabBorder)&#10;    ) {&#10;        // Explorer header&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(DarculaColors.SurfaceVariant)&#10;                .padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Folder,&#10;                contentDescription = &quot;Explorer&quot;,&#10;                tint = DarculaColors.FolderIcon,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;EXPLORER&quot;,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;        }&#10;        &#10;        // File tree&#10;        LazyColumn(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            items(flattenFileTree(fileTree)) { (node, depth) -&gt;&#10;                FileTreeItem(&#10;                    fileNode = node,&#10;                    depth = depth,&#10;                    onClicked = { onFileClicked(node) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FileTreeItem(&#10;    fileNode: FileNode,&#10;    depth: Int,&#10;    onClicked: () -&gt; Unit&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClicked() }&#10;            .padding(start = (depth * 20).dp, top = 2.dp, bottom = 2.dp, end = 8.dp)&#10;            .height(24.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Folder expand/collapse icon&#10;        if (fileNode.type == FileType.FOLDER) {&#10;            Icon(&#10;                imageVector = if (fileNode.isExpanded) Icons.Default.KeyboardArrowDown else Icons.Default.KeyboardArrowRight,&#10;                contentDescription = if (fileNode.isExpanded) &quot;Collapse&quot; else &quot;Expand&quot;,&#10;                tint = DarculaColors.OnSurface,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;        } else {&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.width(4.dp))&#10;        &#10;        // File/folder icon&#10;        Icon(&#10;            imageVector = getFileIcon(fileNode),&#10;            contentDescription = null,&#10;            tint = getFileIconColor(fileNode),&#10;            modifier = Modifier.size(16.dp)&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        &#10;        // File/folder name&#10;        Text(&#10;            text = fileNode.name,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;    }&#10;}&#10;&#10;private fun getFileIcon(fileNode: FileNode): ImageVector {&#10;    return when {&#10;        fileNode.type == FileType.FOLDER -&gt; Icons.Default.Folder&#10;        fileNode.name.endsWith(&quot;.kt&quot;) -&gt; Icons.Default.Code&#10;        fileNode.name.endsWith(&quot;.md&quot;) -&gt; Icons.Default.Description&#10;        else -&gt; Icons.Default.InsertDriveFile&#10;    }&#10;}&#10;&#10;private fun getFileIconColor(fileNode: FileNode): Color {&#10;    return when {&#10;        fileNode.type == FileType.FOLDER -&gt; DarculaColors.FolderIcon&#10;        fileNode.name.endsWith(&quot;.kt&quot;) -&gt; DarculaColors.KotlinFileIcon&#10;        fileNode.name.endsWith(&quot;.md&quot;) -&gt; DarculaColors.MarkdownFileIcon&#10;        else -&gt; DarculaColors.OnSurface&#10;    }&#10;}&#10;&#10;private fun flattenFileTree(node: FileNode, depth: Int = 0): List&lt;Pair&lt;FileNode, Int&gt;&gt; {&#10;    val result = mutableListOf&lt;Pair&lt;FileNode, Int&gt;&gt;()&#10;    result.add(node to depth)&#10;    &#10;    if (node.type == FileType.FOLDER &amp;&amp; node.isExpanded) {&#10;        node.children.forEach { child -&gt;&#10;            result.addAll(flattenFileTree(child, depth + 1))&#10;        }&#10;    }&#10;    &#10;    return result&#10;}&#10;" />
              <option name="updatedContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import org.yashvant.portofolio.data.FileNode&#10;import org.yashvant.portofolio.data.FileType&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun FileExplorerView(&#10;    fileTree: FileNode,&#10;    onFileClicked: (FileNode) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    BoxWithConstraints(&#10;        modifier = modifier&#10;    ) {&#10;        val isMobile = maxWidth &lt; 600.dp&#10;        &#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxHeight()&#10;                .then(&#10;                    if (isMobile) Modifier.fillMaxWidth()&#10;                    else Modifier.widthIn(min = 250.dp, max = 350.dp)&#10;                )&#10;                .background(DarculaColors.Surface)&#10;                .border(1.dp, DarculaColors.TabBorder)&#10;        ) {&#10;            // Explorer header&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .background(DarculaColors.SurfaceVariant)&#10;                    .padding(if (isMobile) 12.dp else 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Folder,&#10;                    contentDescription = &quot;Explorer&quot;,&#10;                    tint = DarculaColors.FolderIcon,&#10;                    modifier = Modifier.size(if (isMobile) 20.dp else 16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;EXPLORER&quot;,&#10;                    style = if (isMobile) MaterialTheme.typography.titleSmall else MaterialTheme.typography.labelMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = DarculaColors.OnSurface&#10;                )&#10;            }&#10;            &#10;            // File tree&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentPadding = if (isMobile) PaddingValues(4.dp) else PaddingValues(0.dp)&#10;            ) {&#10;                items(flattenFileTree(fileTree)) { (node, depth) -&gt;&#10;                    FileTreeItem(&#10;                        fileNode = node,&#10;                        depth = depth,&#10;                        isMobile = isMobile,&#10;                        onClicked = { onFileClicked(node) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FileTreeItem(&#10;    fileNode: FileNode,&#10;    depth: Int,&#10;    isMobile: Boolean,&#10;    onClicked: () -&gt; Unit&#10;) {&#10;    val itemHeight = if (isMobile) 32.dp else 24.dp&#10;    val indentSize = if (isMobile) 24.dp else 20.dp&#10;    val iconSize = if (isMobile) 20.dp else 16.dp&#10;    &#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClicked() }&#10;            .padding(&#10;                start = (depth * indentSize.value).dp, &#10;                top = if (isMobile) 4.dp else 2.dp, &#10;                bottom = if (isMobile) 4.dp else 2.dp, &#10;                end = if (isMobile) 12.dp else 8.dp&#10;            )&#10;            .height(itemHeight),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Folder expand/collapse icon&#10;        if (fileNode.type == FileType.FOLDER) {&#10;            Icon(&#10;                imageVector = if (fileNode.isExpanded) Icons.Default.KeyboardArrowDown else Icons.Default.KeyboardArrowRight,&#10;                contentDescription = if (fileNode.isExpanded) &quot;Collapse&quot; else &quot;Expand&quot;,&#10;                tint = DarculaColors.OnSurface,&#10;                modifier = Modifier.size(iconSize)&#10;            )&#10;        } else {&#10;            Spacer(modifier = Modifier.width(iconSize))&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.width(4.dp))&#10;        &#10;        // File/folder icon&#10;        Icon(&#10;            imageVector = getFileIcon(fileNode),&#10;            contentDescription = null,&#10;            tint = getFileIconColor(fileNode),&#10;            modifier = Modifier.size(iconSize)&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        &#10;        // File/folder name&#10;        Text(&#10;            text = fileNode.name,&#10;            style = if (isMobile) MaterialTheme.typography.bodyLarge else MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.OnSurface,&#10;            maxLines = 1,&#10;            overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;        )&#10;    }&#10;}&#10;&#10;private fun getFileIcon(fileNode: FileNode): ImageVector {&#10;    return when {&#10;        fileNode.type == FileType.FOLDER -&gt; Icons.Default.Folder&#10;        fileNode.name.endsWith(&quot;.kt&quot;) -&gt; Icons.Default.Code&#10;        fileNode.name.endsWith(&quot;.md&quot;) -&gt; Icons.Default.Description&#10;        else -&gt; Icons.Default.InsertDriveFile&#10;    }&#10;}&#10;&#10;private fun getFileIconColor(fileNode: FileNode): Color {&#10;    return when {&#10;        fileNode.type == FileType.FOLDER -&gt; DarculaColors.FolderIcon&#10;        fileNode.name.endsWith(&quot;.kt&quot;) -&gt; DarculaColors.KotlinFileIcon&#10;        fileNode.name.endsWith(&quot;.md&quot;) -&gt; DarculaColors.MarkdownFileIcon&#10;        else -&gt; DarculaColors.OnSurface&#10;    }&#10;}&#10;&#10;private fun flattenFileTree(node: FileNode, depth: Int = 0): List&lt;Pair&lt;FileNode, Int&gt;&gt; {&#10;    val result = mutableListOf&lt;Pair&lt;FileNode, Int&gt;&gt;()&#10;    result.add(node to depth)&#10;    &#10;    if (node.type == FileType.FOLDER &amp;&amp; node.isExpanded) {&#10;        node.children.forEach { child -&gt;&#10;            result.addAll(flattenFileTree(child, depth + 1))&#10;        }&#10;    }&#10;    &#10;    return result&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/ProjectDemoDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/ProjectDemoDialog.kt" />
              <option name="originalContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.*&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import org.yashvant.portofolio.data.Project&#10;import org.yashvant.portofolio.data.ProjectDemoType&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun ProjectDemoDialog(&#10;    project: Project,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.8f)&#10;                .fillMaxHeight(0.8f),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = DarculaColors.Surface&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                // Header&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .background(DarculaColors.SurfaceVariant)&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${project.name} - Demo&quot;,&#10;                        style = MaterialTheme.typography.displayMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = DarculaColors.OnSurface&#10;                    )&#10;&#10;                    IconButton(onClick = onDismiss) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Close,&#10;                            contentDescription = &quot;Close&quot;,&#10;                            tint = DarculaColors.OnSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Content based on demo type&#10;                when (project.demoType) {&#10;                    ProjectDemoType.IMAGE_ANALYSIS -&gt; ImageAnalysisDemo()&#10;                    ProjectDemoType.APP_BACKUP -&gt; AppBackupDemo()&#10;                    ProjectDemoType.GITHUB_LINK -&gt; GitHubLinkDemo(project)&#10;                    ProjectDemoType.LINK -&gt; GitHubLinkDemo(project)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ImageAnalysisDemo() {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Left side - Sample image&#10;        Column(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxHeight()&#10;        ) {&#10;            Text(&#10;                text = &quot;Sample Image&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;                    .background(DarculaColors.Background)&#10;                    .border(2.dp, DarculaColors.Primary),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Image,&#10;                        contentDescription = &quot;Sample Image&quot;,&#10;                        tint = DarculaColors.Primary,&#10;                        modifier = Modifier.size(64.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Sample Photo&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = DarculaColors.Comment&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Primary&#10;                ),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Analytics,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Analyze with Gemini Vision&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;&#10;        // Right side - Analysis result&#10;        Column(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxHeight()&#10;        ) {&#10;            Text(&#10;                text = &quot;Gemini Vision Analysis&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxSize(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = DarculaColors.Background&#10;                )&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier.padding(12.dp)&#10;                ) {&#10;                    item {&#10;                        Text(&#10;                            text = &quot;Analysis Results:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = DarculaColors.Keyword&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Object Detection: Mobile phone, person, indoor environment&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Scene Understanding: Technology demonstration in indoor setting&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Text Recognition: No visible text detected&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Confidence Score: 94.7%&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.Number&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        Text(&#10;                            text = &quot;Accessibility Description:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = DarculaColors.Keyword&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;\&quot;A person is holding a smartphone displaying an application interface. The setting appears to be indoors with good lighting, suitable for app demonstration purposes.\&quot;&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.String&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AppBackupDemo() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;App Backup Manager&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Select apps to backup:&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        val sampleApps = listOf(&#10;            &quot;WhatsApp&quot; to true,&#10;            &quot;Instagram&quot; to false,&#10;            &quot;Gmail&quot; to true,&#10;            &quot;Chrome&quot; to false,&#10;            &quot;Spotify&quot; to true,&#10;            &quot;Netflix&quot; to false,&#10;            &quot;YouTube&quot; to true,&#10;            &quot;Maps&quot; to false&#10;        )&#10;&#10;        LazyColumn(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            items(sampleApps) { (appName, isSelected) -&gt;&#10;                var checked by remember { mutableStateOf(isSelected) }&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { checked = !checked }&#10;                        .padding(vertical = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Checkbox(&#10;                        checked = checked,&#10;                        onCheckedChange = { checked = it },&#10;                        colors = CheckboxDefaults.colors(&#10;                            checkedColor = DarculaColors.Primary,&#10;                            uncheckedColor = DarculaColors.Comment&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    Icon(&#10;                        imageVector = Icons.Default.Android,&#10;                        contentDescription = null,&#10;                        tint = DarculaColors.Primary,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                    Text(&#10;                        text = appName,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = DarculaColors.OnSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Primary&#10;                ),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CloudUpload,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Backup to Google Drive&quot;)&#10;            }&#10;&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Secondary&#10;                ),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CloudDownload,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Restore from Backup&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun GitHubLinkDemo(project: Project) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Code,&#10;            contentDescription = null,&#10;            tint = DarculaColors.Primary,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = project.name,&#10;            style = MaterialTheme.typography.displayMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = project.description,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Tech Stack: ${project.techStack}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.Comment&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = { /* Open GitHub link */ },&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = DarculaColors.Primary&#10;            )&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.OpenInNew,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;View on GitHub&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import org.yashvant.portofolio.data.Project&#10;import org.yashvant.portofolio.data.ProjectDemoType&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun ProjectDemoDialog(&#10;    project: Project,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.8f)&#10;                .fillMaxHeight(0.8f),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = DarculaColors.Surface&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                // Header&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .background(DarculaColors.SurfaceVariant)&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${project.name} - Demo&quot;,&#10;                        style = MaterialTheme.typography.displayMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = DarculaColors.OnSurface&#10;                    )&#10;&#10;                    IconButton(onClick = onDismiss) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Close,&#10;                            contentDescription = &quot;Close&quot;,&#10;                            tint = DarculaColors.OnSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Content based on demo type&#10;                when (project.demoType) {&#10;                    ProjectDemoType.IMAGE_ANALYSIS -&gt; ImageAnalysisDemo()&#10;                    ProjectDemoType.APP_BACKUP -&gt; AppBackupDemo()&#10;                    ProjectDemoType.GITHUB_LINK -&gt; GitHubLinkDemo(project)&#10;                    ProjectDemoType.LINK -&gt; GitHubLinkDemo(project)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ImageAnalysisDemo() {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Left side - Sample image&#10;        Column(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxHeight()&#10;        ) {&#10;            Text(&#10;                text = &quot;Sample Image&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;                    .background(DarculaColors.Background)&#10;                    .border(2.dp, DarculaColors.Primary),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Image,&#10;                        contentDescription = &quot;Sample Image&quot;,&#10;                        tint = DarculaColors.Primary,&#10;                        modifier = Modifier.size(64.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Sample Photo&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = DarculaColors.Comment&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Primary&#10;                ),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Analytics,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Analyze with Gemini Vision&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;&#10;        // Right side - Analysis result&#10;        Column(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxHeight()&#10;        ) {&#10;            Text(&#10;                text = &quot;Gemini Vision Analysis&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxSize(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = DarculaColors.Background&#10;                )&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier.padding(12.dp)&#10;                ) {&#10;                    item {&#10;                        Text(&#10;                            text = &quot;Analysis Results:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = DarculaColors.Keyword&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Object Detection: Mobile phone, person, indoor environment&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Scene Understanding: Technology demonstration in indoor setting&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Text Recognition: No visible text detected&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Confidence Score: 94.7%&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.Number&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        Text(&#10;                            text = &quot;Accessibility Description:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = DarculaColors.Keyword&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;\&quot;A person is holding a smartphone displaying an application interface. The setting appears to be indoors with good lighting, suitable for app demonstration purposes.\&quot;&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.String&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AppBackupDemo() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;App Backup Manager&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Select apps to backup:&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        val sampleApps = listOf(&#10;            &quot;WhatsApp&quot; to true,&#10;            &quot;Instagram&quot; to false,&#10;            &quot;Gmail&quot; to true,&#10;            &quot;Chrome&quot; to false,&#10;            &quot;Spotify&quot; to true,&#10;            &quot;Netflix&quot; to false,&#10;            &quot;YouTube&quot; to true,&#10;            &quot;Maps&quot; to false&#10;        )&#10;&#10;        LazyColumn(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            items(sampleApps) { (appName, isSelected) -&gt;&#10;                var checked by remember { mutableStateOf(isSelected) }&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { checked = !checked }&#10;                        .padding(vertical = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Checkbox(&#10;                        checked = checked,&#10;                        onCheckedChange = { checked = it },&#10;                        colors = CheckboxDefaults.colors(&#10;                            checkedColor = DarculaColors.Primary,&#10;                            uncheckedColor = DarculaColors.Comment&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    Icon(&#10;                        imageVector = Icons.Default.Android,&#10;                        contentDescription = null,&#10;                        tint = DarculaColors.Primary,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                    Text(&#10;                        text = appName,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = DarculaColors.OnSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Primary&#10;                ),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CloudUpload,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Backup to Google Drive&quot;)&#10;            }&#10;&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Secondary&#10;                ),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CloudDownload,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Restore from Backup&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun GitHubLinkDemo(project: Project) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Code,&#10;            contentDescription = null,&#10;            tint = DarculaColors.Primary,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = project.name,&#10;            style = MaterialTheme.typography.displayMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = project.description,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Tech Stack: ${project.techStack}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.Comment&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = { /* Open GitHub link */ },&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = DarculaColors.Primary&#10;            )&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.OpenInNew,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;View on GitHub&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/theme/DarculaTheme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/theme/DarculaTheme.kt" />
              <option name="updatedContent" value="package org.yashvant.portofolio.ui.theme&#10;&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;&#10;object DarculaColors {&#10;    // Main background colors - making them darker and more modern&#10;    val Background = Color(0xFF1E1E1E)&#10;    val Surface = Color(0xFF252526)&#10;    val SurfaceVariant = Color(0xFF2D2D30)&#10;    &#10;    // Text colors&#10;    val OnBackground = Color(0xFFD4D4D4)&#10;    val OnSurface = Color(0xFFCCCCCC)&#10;    &#10;    // Syntax highlighting colors&#10;    val Keyword = Color(0xFF569CD6)&#10;    val String = Color(0xFF6A9955)&#10;    val Comment = Color(0xFF6A9955)&#10;    val Number = Color(0xFFB5CEA8)&#10;    val Type = Color(0xFF4EC9B0)&#10;    &#10;    // UI element colors&#10;    val Primary = Color(0xFF007ACC)&#10;    val Secondary = Color(0xFF37373D)&#10;    &#10;    // Tab colors&#10;    val TabActive = Color(0xFF1E1E1E)&#10;    val TabInactive = Color(0xFF2D2D30)&#10;    val TabBorder = Color(0xFF3E3E42)&#10;    &#10;    // File icon colors&#10;    val FolderIcon = Color(0xFFDCB67A)&#10;    val KotlinFileIcon = Color(0xFF7F52FF)&#10;    val MarkdownFileIcon = Color(0xFF0366D6)&#10;    &#10;    // Status bar&#10;    val StatusBar = Color(0xFF007ACC)&#10;}&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = DarculaColors.Primary,&#10;    onPrimary = Color.White,&#10;    primaryContainer = DarculaColors.Primary,&#10;    onPrimaryContainer = Color.White,&#10;    secondary = DarculaColors.Secondary,&#10;    onSecondary = Color.White,&#10;    background = DarculaColors.Background,&#10;    onBackground = DarculaColors.OnBackground,&#10;    surface = DarculaColors.Surface,&#10;    onSurface = DarculaColors.OnSurface,&#10;    surfaceVariant = DarculaColors.SurfaceVariant,&#10;    onSurfaceVariant = DarculaColors.OnSurface&#10;)&#10;&#10;@Composable&#10;fun DarculaTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    MaterialTheme(&#10;        colorScheme = DarkColorScheme,&#10;        typography = Typography(),&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/viewmodel/PortfolioViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/viewmodel/PortfolioViewModel.kt" />
              <option name="originalContent" value="package org.yashvant.portofolio.viewmodel&#10;&#10;import androidx.compose.runtime.*&#10;import org.yashvant.portofolio.data.*&#10;&#10;class PortfolioViewModel {&#10;&#10;    private val _fileTree = mutableStateOf(createFileTree())&#10;    val fileTree: State&lt;FileNode&gt; = _fileTree&#10;&#10;    private val _openTabs = mutableStateOf&lt;List&lt;TabItem&gt;&gt;(emptyList())&#10;    val openTabs: State&lt;List&lt;TabItem&gt;&gt; = _openTabs&#10;&#10;    private val _activeTab = mutableStateOf&lt;FileNode?&gt;(null)&#10;    val activeTab: State&lt;FileNode?&gt; = _activeTab&#10;&#10;    private val _showProjectDialog = mutableStateOf(false)&#10;    val showProjectDialog: State&lt;Boolean&gt; = _showProjectDialog&#10;&#10;    private val _selectedProject = mutableStateOf&lt;Project?&gt;(null)&#10;    val selectedProject: State&lt;Project?&gt; = _selectedProject&#10;&#10;    init {&#10;        // Open README.md by default&#10;        val readmeFile = findReadmeFile(fileTree.value)&#10;        readmeFile?.let { onFileClicked(it) }&#10;    }&#10;&#10;    fun onFileClicked(file: FileNode) {&#10;        if (file.type == FileType.FOLDER) {&#10;            toggleFolder(file)&#10;        } else {&#10;            openFile(file)&#10;        }&#10;    }&#10;&#10;    fun onTabClosed(file: FileNode) {&#10;        val updatedTabs = _openTabs.value.filter { it.fileNode != file }&#10;        _openTabs.value = updatedTabs&#10;&#10;        if (_activeTab.value == file) {&#10;            _activeTab.value = updatedTabs.lastOrNull()?.fileNode&#10;        }&#10;    }&#10;&#10;    fun onTabClicked(file: FileNode) {&#10;        _activeTab.value = file&#10;        updateTabsActiveState()&#10;    }&#10;&#10;    fun onRunProjectClicked(project: Project) {&#10;        _selectedProject.value = project&#10;        _showProjectDialog.value = true&#10;    }&#10;&#10;    fun onCloseProjectDialog() {&#10;        _showProjectDialog.value = false&#10;        _selectedProject.value = null&#10;    }&#10;&#10;    private fun openFile(file: FileNode) {&#10;        val existingTab = _openTabs.value.find { it.fileNode == file }&#10;        if (existingTab == null) {&#10;            val newTab = TabItem(file)&#10;            _openTabs.value = _openTabs.value + newTab&#10;        }&#10;        _activeTab.value = file&#10;        updateTabsActiveState()&#10;    }&#10;&#10;    private fun updateTabsActiveState() {&#10;        _openTabs.value = _openTabs.value.map { tab -&gt;&#10;            tab.copy(isActive = tab.fileNode == _activeTab.value)&#10;        }&#10;    }&#10;&#10;    private fun toggleFolder(folder: FileNode) {&#10;        _fileTree.value = toggleFolderInTree(_fileTree.value, folder)&#10;    }&#10;&#10;    private fun toggleFolderInTree(node: FileNode, target: FileNode): FileNode {&#10;        if (node == target) {&#10;            return node.copy(isExpanded = !node.isExpanded)&#10;        }&#10;        return node.copy(children = node.children.map { toggleFolderInTree(it, target) })&#10;    }&#10;&#10;    private fun findReadmeFile(node: FileNode): FileNode? {&#10;        if (node.name == &quot;README.md&quot;) return node&#10;        for (child in node.children) {&#10;            val found = findReadmeFile(child)&#10;            if (found != null) return found&#10;        }&#10;        return null&#10;    }&#10;&#10;    private fun createFileTree(): FileNode {&#10;        return FileNode(&#10;            name = &quot;portfolio&quot;,&#10;            type = FileType.FOLDER,&#10;            isExpanded = true,&#10;            children = listOf(&#10;                createExperienceFolder(),&#10;                createProjectsFolder(),&#10;                createSkillsFolder(),&#10;                createAchievementsFile(),&#10;                createReadmeFile()&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createExperienceFolder(): FileNode {&#10;        return FileNode(&#10;            name = &quot;experience&quot;,&#10;            type = FileType.FOLDER,&#10;            children = listOf(&#10;                FileNode(&#10;                    name = &quot;AGOMUC.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * AGOMUC - Kotlin Intern Experience&#10; * &#10; * Company: AGOMUC&#10; * Duration: May 2025 – Present&#10; * Location: Hybrid&#10; * &#10; * Key Responsibilities:&#10; * - Worked with experienced developers to develop android apps in Jetpack compose&#10; * - Developed apps with Kiosk and sensor connection features&#10; * &#10; * Technologies: Kotlin, Jetpack Compose, Android SDK, Sensor Integration&#10; */&#10;&#10;package org.yashvant.portfolio.experience&#10;&#10;class AGOMUCExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Kotlin Intern (Paid)&quot;&#10;        const val COMPANY = &quot;AGOMUC&quot;&#10;        const val DURATION = &quot;May 2025 – Present&quot;&#10;        const val LOCATION = &quot;Hybrid&quot;&#10;        &#10;        val responsibilities = listOf(&#10;            &quot;Worked with experienced developers to develop android apps in Jetpack compose&quot;,&#10;            &quot;Developed apps with Kiosk and sensor connection features&quot;&#10;        )&#10;        &#10;        val technologies = listOf(&#10;            &quot;Kotlin&quot;,&#10;            &quot;Jetpack Compose&quot;, &#10;            &quot;Android SDK&quot;,&#10;            &quot;Sensor Integration&quot;,&#10;            &quot;Kiosk Applications&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;DAPS.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * DAPS - Android Developer Intern Experience&#10; * &#10; * Company: DAPS&#10; * Duration: October 2024 – December 2024&#10; * Location: Remote&#10; * &#10; * Key Responsibilities:&#10; * - Created UI forms for apps as per client requirement&#10; * - Integrated 10+ backend APIs to the frontend of different apps&#10; * - Collaborated with a team of 10+ developers to create apps as per requirements&#10; * &#10; * Technologies: Kotlin, Android SDK, REST APIs, UI/UX Development&#10; */&#10;&#10;package org.yashvant.portfolio.experience&#10;&#10;class DAPSExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Android Developer Intern (Paid)&quot;&#10;        const val COMPANY = &quot;DAPS&quot;&#10;        const val DURATION = &quot;October 2024 – December 2024&quot;&#10;        const val LOCATION = &quot;Remote&quot;&#10;        &#10;        val responsibilities = listOf(&#10;            &quot;Created UI forms for apps as per client requirement&quot;,&#10;            &quot;Integrated 10+ backend APIs to the frontend of different apps&quot;,&#10;            &quot;Collaborated with a team of 10+ developers to create apps as per requirements&quot;&#10;        )&#10;        &#10;        val technologies = listOf(&#10;            &quot;Kotlin&quot;,&#10;            &quot;Android SDK&quot;,&#10;            &quot;REST APIs&quot;, &#10;            &quot;UI/UX Development&quot;,&#10;            &quot;Team Collaboration&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                createExtracurricularFolder()&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createExtracurricularFolder(): FileNode {&#10;        return FileNode(&#10;            name = &quot;extracurricular&quot;,&#10;            type = FileType.FOLDER,&#10;            children = listOf(&#10;                FileNode(&#10;                    name = &quot;DSC_KIET.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * DSC KIET - Android Lead Experience&#10; * &#10; * Organization: Developer Student Clubs (DSC) KIET&#10; * Duration: March 2023 – Present&#10; * Role: Android Lead&#10; * Institution: KIET Group of Institutions&#10; * &#10; * Key Contributions:&#10; * - Collaborated with a 7-member team on Android development projects&#10; * - Participated in hackathons, tech talks, coding contests, and KotlinConf Global&#10; * - Organized an offline hackathon, a 4-day Android bootcamp with 30+ attendees, and a Git/GitHub workshop&#10; * &#10; * Leadership &amp; Impact: Led Android development initiatives and mentored fellow students&#10; */&#10;&#10;package org.yashvant.portfolio.experience.extracurricular&#10;&#10;class DSCKIETExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Android Lead&quot;&#10;        const val ORGANIZATION = &quot;DSC KIET&quot;&#10;        const val DURATION = &quot;March 2023 – Present&quot;&#10;        const val INSTITUTION = &quot;KIET Group of Institutions&quot;&#10;        &#10;        val achievements = listOf(&#10;            &quot;Collaborated with a 7-member team on Android development projects&quot;,&#10;            &quot;Participated in hackathons, tech talks, coding contests, and KotlinConf Global&quot;,&#10;            &quot;Organized an offline hackathon with significant participation&quot;,&#10;            &quot;Conducted a 4-day Android bootcamp with 30+ attendees&quot;,&#10;            &quot;Led Git/GitHub workshop for fellow students&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;NSCC_KIET.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * NSCC KIET - Java Team Member Experience&#10; * &#10; * Organization: Newton School Coding Club (NSCC) KIET&#10; * Duration: March 2024 – Present&#10; * Role: Java Team Member&#10; * Institution: KIET Group of Institutions&#10; * &#10; * Key Contributions:&#10; * - Built projects and held lectures on Spring Boot teaching juniors&#10; * - Focused on backend development and Java ecosystem&#10; * &#10; * Technologies: Java, Spring Boot, Backend Development&#10; */&#10;&#10;package org.yashvant.portfolio.experience.extracurricular&#10;&#10;class NSCCKIETExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Java Team Member&quot;&#10;        const val ORGANIZATION = &quot;NSCC KIET&quot;&#10;        const val DURATION = &quot;March 2024 – Present&quot;&#10;        const val INSTITUTION = &quot;KIET Group of Institutions&quot;&#10;        &#10;        val contributions = listOf(&#10;            &quot;Built projects using Java and Spring Boot&quot;,&#10;            &quot;Held lectures on Spring Boot framework&quot;,&#10;            &quot;Taught and mentored junior students&quot;,&#10;            &quot;Contributed to backend development initiatives&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;FOSSCU.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * FOSSCU - Spring Boot/Android Developer Experience&#10; * &#10; * Organization: Free and Open Source Software Community (FOSSCU)&#10; * Duration: April 2024 – Present&#10; * Role: Spring Boot/Android Developer&#10; * Institution: KIET Group of Institutions&#10; * &#10; * Key Contributions:&#10; * - Contributed to 5+ open-source projects involving Spring Boot and Android&#10; * - Active participant in open source community initiatives&#10; * &#10; * Technologies: Spring Boot, Android, Open Source Development&#10; */&#10;&#10;package org.yashvant.portfolio.experience.extracurricular&#10;&#10;class FOSSCUExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Spring Boot/Android Developer&quot;&#10;        const val ORGANIZATION = &quot;FOSSCU&quot;&#10;        const val DURATION = &quot;April 2024 – Present&quot;&#10;        const val INSTITUTION = &quot;KIET Group of Institutions&quot;&#10;        &#10;        val contributions = listOf(&#10;            &quot;Contributed to 5+ open-source projects&quot;,&#10;            &quot;Specialized in Spring Boot backend development&quot;,&#10;            &quot;Android application development&quot;,&#10;            &quot;Active community participant and contributor&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                )&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createProjectsFolder(): FileNode {&#10;        val zyptraProject = Project(&#10;            name = &quot;Zyptra&quot;,&#10;            description = &quot;Developed a full-fledged Android application backup solution allowing users to extract and backup APKs to Google Drive&quot;,&#10;            techStack = &quot;Kotlin, Jetpack Compose, Clean Architecture, Google Drive API, Hilt&quot;,&#10;            link = &quot;https://github.com/yashvant/zyptra&quot;,&#10;            demoType = ProjectDemoType.APP_BACKUP&#10;        )&#10;&#10;        val imgcProject = Project(&#10;            name = &quot;ImGC&quot;,&#10;            description = &quot;Developed an app allowing users to receive contextual descriptions and perform conversational Q&amp;A about any image from their gallery&quot;,&#10;            techStack = &quot;Kotlin, Jetpack Compose, Gemini-Vision API, MVVM&quot;,&#10;            link = &quot;https://github.com/yashvant/imgc&quot;,&#10;            demoType = ProjectDemoType.IMAGE_ANALYSIS&#10;        )&#10;&#10;        val codevProject = Project(&#10;            name = &quot;Codev&quot;,&#10;            description = &quot;Built a collaborative platform for developers, enabling users to share and showcase projects with project matching and team-formation features&quot;,&#10;            techStack = &quot;Kotlin, Jetpack Compose, Firebase, Dagger-Hilt, MVVM&quot;,&#10;            link = &quot;https://github.com/yashvant/codev&quot;,&#10;            demoType = ProjectDemoType.GITHUB_LINK&#10;        )&#10;&#10;        val diaenshoProject = Project(&#10;            name = &quot;Diaensho&quot;,&#10;            description = &quot;Engineered an AI-powered audio diary to capture and summarize spoken thoughts, featuring an always-on hotword listener built with a persistent Foreground Service&quot;,&#10;            techStack = &quot;Kotlin, Jetpack Compose, Coroutines, Hilt, Room, WorkManager&quot;,&#10;            link = &quot;https://github.com/yashvant/diaensho&quot;,&#10;            demoType = ProjectDemoType.GITHUB_LINK&#10;        )&#10;&#10;        return FileNode(&#10;            name = &quot;projects&quot;,&#10;            type = FileType.FOLDER,&#10;            isExpanded = true,&#10;            children = listOf(&#10;                FileNode(&#10;                    name = &quot;Zyptra.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    hasRunButton = true,&#10;                    project = zyptraProject,&#10;                    content = &quot;&quot;&quot;/**&#10; * Zyptra - Android Application Backup Solution&#10; * Project Duration: May 2025 - June 2025&#10; * &#10; * Description:&#10; * Developed a full-fledged Android application backup solution allowing users to extract &#10; * and backup APKs to Google Drive. Engineered the app using Clean Architecture principles &#10; * with MVVM for a highly scalable and maintainable codebase.&#10; * &#10; * Features:&#10; * - Extract and backup APK files from installed applications&#10; * - Google Drive integration for cloud storage&#10; * - Clean Architecture with MVVM pattern&#10; * - Dependency injection using Hilt&#10; * - Material Design UI with Jetpack Compose&#10; * &#10; * Tech Stack: Kotlin, Jetpack Compose, Clean Architecture, Google Drive API, Hilt&#10; */&#10;&#10;package org.yashvant.portfolio.projects&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;&#10;class ZyptraProject {&#10;    companion object {&#10;        const val NAME = &quot;Zyptra&quot;&#10;        const val DURATION = &quot;May 2025 - June 2025&quot;&#10;        const val DESCRIPTION = &quot;Android Application Backup Solution&quot;&#10;        const val TECH_STACK = &quot;Kotlin, Jetpack Compose, Clean Architecture, Google Drive API, Hilt&quot;&#10;    }&#10;    &#10;    fun extractApks(): List&lt;String&gt; {&#10;        // APK extraction logic would be implemented here&#10;        return listOf(&quot;app1.apk&quot;, &quot;app2.apk&quot;, &quot;app3.apk&quot;)&#10;    }&#10;    &#10;    fun backupToGoogleDrive(apks: List&lt;String&gt;) {&#10;        // Google Drive backup logic would be implemented here&#10;        println(&quot;Backing up ${&quot;$&quot;}{apks.size} APKs to Google Drive...&quot;)&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;ImGC.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    hasRunButton = true,&#10;                    project = imgcProject,&#10;                    content = &quot;&quot;&quot;/**&#10; * ImGC - Image Analysis with Gemini Vision API&#10; * Project Duration: March 2024 - April 2024&#10; * &#10; * Description:&#10; * Developed an app allowing users to receive contextual descriptions and perform &#10; * conversational Q&amp;A about any image from their gallery. Integrated the Google &#10; * Gemini-Vision Pro API to power the core visual understanding and analysis features.&#10; * &#10; * Features:&#10; * - Image selection from gallery&#10; * - Contextual image descriptions using Gemini Vision&#10; * - Conversational Q&amp;A about image content&#10; * - Real-time image analysis&#10; * - MVVM architecture for clean code structure&#10; * &#10; * Tech Stack: Kotlin, Jetpack Compose, Gemini-Vision API, MVVM&#10; */&#10;&#10;package org.yashvant.portfolio.projects&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;&#10;class ImGCProject {&#10;    companion object {&#10;        const val NAME = &quot;ImGC&quot;&#10;        const val DURATION = &quot;March 2024 - April 2024&quot;&#10;        const val DESCRIPTION = &quot;Image Analysis with Gemini Vision API&quot;&#10;        const val TECH_STACK = &quot;Kotlin, Jetpack Compose, Gemini-Vision API, MVVM&quot;&#10;    }&#10;    &#10;    suspend fun analyzeImage(imageUri: String): String {&#10;        // Gemini Vision API integration would be implemented here&#10;        return &quot;Image analysis completed successfully&quot;&#10;    }&#10;    &#10;    fun generateImageDescription(imageData: ByteArray): String {&#10;        // Image description generation logic&#10;        return &quot;Generated contextual description of the image&quot;&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;Codev.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    hasRunButton = true,&#10;                    project = codevProject,&#10;                    content = &quot;&quot;&quot;/**&#10; * Codev - Collaborative Development Platform&#10; * Project Duration: November 2023 - April 2024&#10; * &#10; * Description:&#10; * Built a collaborative platform for developers, enabling users to share and showcase &#10; * projects. Enhanced collaboration by introducing project matching and team-formation &#10; * features for better developer networking.&#10; * &#10; * Features:&#10; * - Developer project showcase platform&#10; * - Project matching algorithm&#10; * - Team formation features&#10; * - Real-time collaboration tools&#10; * - Firebase backend integration&#10; * &#10; * Tech Stack: Kotlin, Jetpack Compose, Firebase, Dagger-Hilt, MVVM&#10; */&#10;&#10;package org.yashvant.portfolio.projects&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;&#10;class CodevProject {&#10;    companion object {&#10;        const val NAME = &quot;Codev&quot;&#10;        const val DURATION = &quot;November 2023 - April 2024&quot;&#10;        const val DESCRIPTION = &quot;Collaborative Development Platform&quot;&#10;        const val TECH_STACK = &quot;Kotlin, Jetpack Compose, Firebase, Dagger-Hilt, MVVM&quot;&#10;    }&#10;    &#10;    fun matchProjects(userSkills: List&lt;String&gt;): List&lt;String&gt; {&#10;        // Project matching algorithm implementation&#10;        return listOf(&quot;Android Project&quot;, &quot;Web Development&quot;, &quot;AI/ML Project&quot;)&#10;    }&#10;    &#10;    fun formTeam(projectId: String, developers: List&lt;String&gt;) {&#10;        // Team formation logic&#10;        println(&quot;Team formed for project: \\$projectId&quot;)&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;Diaensho.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    hasRunButton = true,&#10;                    project = diaenshoProject,&#10;                    content = &quot;&quot;&quot;/**&#10; * Diaensho - AI-Powered Audio Diary&#10; * Project Duration: July 2025 - Present&#10; * &#10; * Description:&#10; * Engineered an AI-powered audio diary to capture and summarize spoken thoughts, &#10; * featuring an always-on hotword listener built with a persistent Foreground Service.&#10; * Implemented an offline-first architecture using Room and managed complex background &#10; * tasks for habit tracking and data sync with WorkManager.&#10; * &#10; * Features:&#10; * - AI-powered audio diary with speech recognition&#10; * - Always-on hotword listener with Foreground Service&#10; * - Offline-first architecture using Room database&#10; * - Background task management with WorkManager&#10; * - Habit tracking and data synchronization&#10; * &#10; * Tech Stack: Kotlin, Jetpack Compose, Coroutines, Hilt, Room, WorkManager&#10; */&#10;&#10;package org.yashvant.portfolio.projects&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;&#10;class DiaenshoProject {&#10;    companion object {&#10;        const val NAME = &quot;Diaensho&quot;&#10;        const val DURATION = &quot;July 2025 - Present&quot;&#10;        const val DESCRIPTION = &quot;AI-Powered Audio Diary&quot;&#10;        const val TECH_STACK = &quot;Kotlin, Jetpack Compose, Coroutines, Hilt, Room, WorkManager&quot;&#10;    }&#10;    &#10;    fun startHotwordListener() {&#10;        // Foreground service for hotword detection&#10;        println(&quot;Hotword listener started in foreground service&quot;)&#10;    }&#10;    &#10;    fun captureAndSummarize(audioData: ByteArray): String {&#10;        // AI-powered audio processing and summarization&#10;        return &quot;Audio captured and summarized successfully&quot;&#10;    }&#10;    &#10;    fun syncData() {&#10;        // WorkManager background sync implementation&#10;        println(&quot;Data sync scheduled with WorkManager&quot;)&#10;    }&#10;}&quot;&quot;&quot;&#10;                )&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createSkillsFolder(): FileNode {&#10;        return FileNode(&#10;            name = &quot;skills&quot;,&#10;            type = FileType.FOLDER,&#10;            children = listOf(&#10;                FileNode(&#10;                    name = &quot;languages.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * Programming Languages&#10; */&#10;&#10;package org.yashvant.portfolio.skills&#10;&#10;object ProgrammingLanguages {&#10;    val languages = listOf(&#10;        &quot;Kotlin&quot;,&#10;        &quot;Java&quot;, &#10;        &quot;C&quot;,&#10;        &quot;C++&quot;,&#10;        &quot;JavaScript&quot;,&#10;        &quot;Python&quot;,&#10;        &quot;Dart&quot;&#10;    )&#10;    &#10;    fun getExpertiseLevel(language: String): String {&#10;        return when (language) {&#10;            &quot;Kotlin&quot;, &quot;Java&quot; -&gt; &quot;Expert&quot;&#10;            &quot;Python&quot;, &quot;JavaScript&quot; -&gt; &quot;Advanced&quot;&#10;            &quot;C&quot;, &quot;C++&quot;, &quot;Dart&quot; -&gt; &quot;Intermediate&quot;&#10;            else -&gt; &quot;Beginner&quot;&#10;        }&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;frameworks.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * Frameworks and Technologies&#10; */&#10;&#10;package org.yashvant.portfolio.skills&#10;&#10;object FrameworksAndTechnologies {&#10;    val frameworks = listOf(&#10;        &quot;Android&quot;,&#10;        &quot;Full Stack Web&quot;,&#10;        &quot;Flutter&quot;,&#10;        &quot;Spring Boot&quot;,&#10;        &quot;Docker&quot;,&#10;        &quot;GitHub&quot;,&#10;        &quot;Firebase&quot;&#10;    )&#10;    &#10;    val webTechnologies = listOf(&#10;        &quot;HTML5&quot;,&#10;        &quot;CSS3&quot;,&#10;        &quot;JavaScript&quot;,&#10;        &quot;React&quot;,&#10;        &quot;Node.js&quot;&#10;    )&#10;    &#10;    val databases = listOf(&#10;        &quot;SQLite&quot;,&#10;        &quot;Room Database&quot;,&#10;        &quot;Firebase Firestore&quot;,&#10;        &quot;MySQL&quot;&#10;    )&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;tools.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * Development Tools&#10; */&#10;&#10;package org.yashvant.portfolio.skills&#10;&#10;object DevelopmentTools {&#10;    val editors = listOf(&#10;        &quot;Vim&quot;,&#10;        &quot;VS Code&quot;,&#10;        &quot;IntelliJ IDEA&quot;,&#10;        &quot;Android Studio&quot;&#10;    )&#10;    &#10;    val versionControl = listOf(&#10;        &quot;Git&quot;,&#10;        &quot;GitHub&quot;,&#10;        &quot;GitLab&quot;&#10;    )&#10;    &#10;    val cloudPlatforms = listOf(&#10;        &quot;Google Cloud Platform (GCP)&quot;,&#10;        &quot;Firebase&quot;,&#10;        &quot;AWS (Basic)&quot;&#10;    )&#10;    &#10;    val designTools = listOf(&#10;        &quot;Figma&quot;,&#10;        &quot;Adobe XD&quot;,&#10;        &quot;Sketch&quot;&#10;    )&#10;}&quot;&quot;&quot;&#10;                )&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createAchievementsFile(): FileNode {&#10;        return FileNode(&#10;            name = &quot;achievements.md&quot;,&#10;            type = FileType.MARKDOWN_FILE,&#10;            content = &quot;&quot;&quot;# Achievements&#10;&#10;##  Competitions &amp; Recognition&#10;&#10;### NASA Space Apps Challenge 2023 - Winner&#10;- Won the prestigious NASA Space Apps Challenge 2023&#10;- Developed innovative solution for space-related challenges&#10;- Collaborated with international team of developers&#10;&#10;### Competitive Programming&#10;- **Codechef Rating**: Maximum rating of 1427&#10;- **Problem Solving**: 500+ problems solved across platforms&#10;  - LeetCode: Advanced problem solving&#10;  - GeeksforGeeks: Data structures and algorithms&#10;  - CodeChef: Competitive programming contests&#10;&#10;##  Technical Milestones&#10;&#10;### Open Source Contributions&#10;- Active contributor to Android and Kotlin communities&#10;- Multiple projects showcased on GitHub&#10;- Mentored junior developers in mobile app development&#10;&#10;### Academic Excellence&#10;- Strong academic performance in Computer Science&#10;- Specialized in Mobile Application Development&#10;- Research interests in AI/ML and Computer Vision&#10;&quot;&quot;&quot;&#10;        )&#10;    }&#10;&#10;    private fun createReadmeFile(): FileNode {&#10;        return FileNode(&#10;            name = &quot;README.md&quot;,&#10;            type = FileType.MARKDOWN_FILE,&#10;            content = &quot;&quot;&quot;# Yashvant Yadav - Android Developer Portfolio&#10;&#10;## ‍ About Me&#10;&#10;**Name**: Yashvant Yadav  &#10;**Location**: Delhi NCR, Ghaziabad, 201206  &#10;**Specialization**: Android Development  &#10;**Education**: B.Tech in Computer Science (CGPA: 8.5/10) - KIET Group of Institutions (Nov 2022 - June 2026)&#10;&#10;##  Contact Information&#10;&#10;**Email**: yashvantyadav855@gmail.com  &#10;**Academic Email**: yashvant.2226cs1026@kiet.edu  &#10;**Phone**: +91 8090161990  &#10;&#10;##  Links&#10;&#10;**LinkedIn**: [Connect with me on LinkedIn](https://linkedin.com/in/yashvant-yadav)  &#10;**GitHub**: [View my repositories](https://github.com/yashvant-yadav)  &#10;&#10;##  Professional Summary&#10;&#10;Passionate Android Developer with expertise in Kotlin and modern Android development practices. &#10;Currently working as a Kotlin Intern at AGOMUC, with previous experience at DAPS as an Android &#10;Developer Intern. Experienced in building scalable mobile applications using MVVM architecture, &#10;Jetpack Compose, and contemporary Android development tools.&#10;&#10;##  Current Experience&#10;&#10;- **Kotlin Intern (Paid)** at AGOMUC (May 2025 - Present) - Hybrid&#10;- **Android Developer Intern (Paid)** at DAPS (Oct 2024 - Dec 2024) - Remote&#10;&#10;##  Notable Achievements&#10;&#10;- **NASA Space Apps Challenge 2023 - Winner**&#10;- **CodeChef Max Rating**: 1427&#10;- **Problem Solving**: 500+ problems solved on LeetCode, GeeksforGeeks, and CodeChef&#10;&#10;##  Core Competencies&#10;&#10;- **Languages**: Kotlin, Java, C, C++, JavaScript, Python, Dart&#10;- **Technologies/Frameworks**: Android, Full Stack Web, Flutter, Spring Boot, Docker, GitHub, Firebase&#10;- **Tools**: Vim, VS Code, IntelliJ IDEA, Android Studio, Git, GCP&#10;- **Architecture**: MVVM, Clean Architecture, Dependency Injection&#10;- **UI/UX**: Jetpack Compose, Material Design, Custom Views&#10;&#10;##  Featured Projects&#10;&#10;### Zyptra (May 2025 - June 2025)&#10;Android application backup solution with Google Drive integration&#10;*Tech Stack: Kotlin, Jetpack Compose, Clean Architecture, Google Drive API, Hilt*&#10;&#10;### ImGC (March 2024 - April 2024)  &#10;Image analysis app powered by Gemini Vision API&#10;*Tech Stack: Kotlin, Jetpack Compose, Gemini-Vision API, MVVM*&#10;&#10;### Codev (November 2023 - April 2024)&#10;Collaborative platform for developers with project matching features&#10;*Tech Stack: Kotlin, Jetpack Compose, Firebase, Dagger-Hilt, MVVM*&#10;&#10;### Diaensho (July 2025 - Present)&#10;AI-powered audio diary with always-on hotword listener&#10;*Tech Stack: Kotlin, Jetpack Compose, Coroutines, Hilt, Room, WorkManager*&#10;&#10;---&#10;&#10;*Welcome to my portfolio! Explore the file tree to learn more about my experience, projects, and skills.*&#10;&quot;&quot;&quot;&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.yashvant.portofolio.viewmodel&#10;&#10;import androidx.compose.runtime.*&#10;import org.yashvant.portofolio.data.*&#10;&#10;class PortfolioViewModel {&#10;&#10;    private val _fileTree = mutableStateOf(createFileTree())&#10;    val fileTree: State&lt;FileNode&gt; = _fileTree&#10;&#10;    private val _openTabs = mutableStateOf&lt;List&lt;TabItem&gt;&gt;(emptyList())&#10;    val openTabs: State&lt;List&lt;TabItem&gt;&gt; = _openTabs&#10;&#10;    private val _activeTab = mutableStateOf&lt;FileNode?&gt;(null)&#10;    val activeTab: State&lt;FileNode?&gt; = _activeTab&#10;&#10;    private val _showProjectDialog = mutableStateOf(false)&#10;    val showProjectDialog: State&lt;Boolean&gt; = _showProjectDialog&#10;&#10;    private val _selectedProject = mutableStateOf&lt;Project?&gt;(null)&#10;    val selectedProject: State&lt;Project?&gt; = _selectedProject&#10;&#10;    init {&#10;        // Open README.md by default&#10;        val readmeFile = findReadmeFile(fileTree.value)&#10;        readmeFile?.let { onFileClicked(it) }&#10;    }&#10;&#10;    fun onFileClicked(file: FileNode) {&#10;        if (file.type == FileType.FOLDER) {&#10;            toggleFolder(file)&#10;        } else {&#10;            openFile(file)&#10;        }&#10;    }&#10;&#10;    fun onTabClosed(file: FileNode) {&#10;        val updatedTabs = _openTabs.value.filter { it.fileNode != file }&#10;        _openTabs.value = updatedTabs&#10;&#10;        if (_activeTab.value == file) {&#10;            _activeTab.value = updatedTabs.lastOrNull()?.fileNode&#10;        }&#10;    }&#10;&#10;    fun onTabClicked(file: FileNode) {&#10;        _activeTab.value = file&#10;        updateTabsActiveState()&#10;    }&#10;&#10;    fun onRunProjectClicked(project: Project) {&#10;        _selectedProject.value = project&#10;        _showProjectDialog.value = true&#10;    }&#10;&#10;    fun onCloseProjectDialog() {&#10;        _showProjectDialog.value = false&#10;        _selectedProject.value = null&#10;    }&#10;&#10;    private fun openFile(file: FileNode) {&#10;        val existingTab = _openTabs.value.find { it.fileNode == file }&#10;        if (existingTab == null) {&#10;            val newTab = TabItem(file)&#10;            _openTabs.value = _openTabs.value + newTab&#10;        }&#10;        _activeTab.value = file&#10;        updateTabsActiveState()&#10;    }&#10;&#10;    private fun updateTabsActiveState() {&#10;        _openTabs.value = _openTabs.value.map { tab -&gt;&#10;            tab.copy(isActive = tab.fileNode == _activeTab.value)&#10;        }&#10;    }&#10;&#10;    private fun toggleFolder(folder: FileNode) {&#10;        _fileTree.value = toggleFolderInTree(_fileTree.value, folder)&#10;    }&#10;&#10;    private fun toggleFolderInTree(node: FileNode, target: FileNode): FileNode {&#10;        if (node == target) {&#10;            return node.copy(isExpanded = !node.isExpanded)&#10;        }&#10;        return node.copy(children = node.children.map { toggleFolderInTree(it, target) })&#10;    }&#10;&#10;    private fun findReadmeFile(node: FileNode): FileNode? {&#10;        if (node.name == &quot;README.md&quot;) return node&#10;        for (child in node.children) {&#10;            val found = findReadmeFile(child)&#10;            if (found != null) return found&#10;        }&#10;        return null&#10;    }&#10;&#10;    private fun createFileTree(): FileNode {&#10;        return FileNode(&#10;            name = &quot;portfolio&quot;,&#10;            type = FileType.FOLDER,&#10;            isExpanded = true,&#10;            children = listOf(&#10;                createExperienceFolder(),&#10;                createProjectsFolder(),&#10;                createSkillsFolder(),&#10;                createAchievementsFile(),&#10;                createReadmeFile()&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createExperienceFolder(): FileNode {&#10;        return FileNode(&#10;            name = &quot;experience&quot;,&#10;            type = FileType.FOLDER,&#10;            children = listOf(&#10;                FileNode(&#10;                    name = &quot;AGOMUC.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * AGOMUC - Kotlin Intern Experience&#10; * &#10; * Company: AGOMUC&#10; * Duration: May 2025 – Present&#10; * Location: Hybrid&#10; * &#10; * Key Responsibilities:&#10; * - Worked with experienced developers to develop android apps in Jetpack compose&#10; * - Developed apps with Kiosk and sensor connection features&#10; * &#10; * Technologies: Kotlin, Jetpack Compose, Android SDK, Sensor Integration&#10; */&#10;&#10;package org.yashvant.portfolio.experience&#10;&#10;class AGOMUCExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Kotlin Intern (Paid)&quot;&#10;        const val COMPANY = &quot;AGOMUC&quot;&#10;        const val DURATION = &quot;May 2025 – Present&quot;&#10;        const val LOCATION = &quot;Hybrid&quot;&#10;        &#10;        val responsibilities = listOf(&#10;            &quot;Worked with experienced developers to develop android apps in Jetpack compose&quot;,&#10;            &quot;Developed apps with Kiosk and sensor connection features&quot;&#10;        )&#10;        &#10;        val technologies = listOf(&#10;            &quot;Kotlin&quot;,&#10;            &quot;Jetpack Compose&quot;, &#10;            &quot;Android SDK&quot;,&#10;            &quot;Sensor Integration&quot;,&#10;            &quot;Kiosk Applications&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;DAPS.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * DAPS - Android Developer Intern Experience&#10; * &#10; * Company: DAPS&#10; * Duration: October 2024 – December 2024&#10; * Location: Remote&#10; * &#10; * Key Responsibilities:&#10; * - Created UI forms for apps as per client requirement&#10; * - Integrated 10+ backend APIs to the frontend of different apps&#10; * - Collaborated with a team of 10+ developers to create apps as per requirements&#10; * &#10; * Technologies: Kotlin, Android SDK, REST APIs, UI/UX Development&#10; */&#10;&#10;package org.yashvant.portfolio.experience&#10;&#10;class DAPSExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Android Developer Intern (Paid)&quot;&#10;        const val COMPANY = &quot;DAPS&quot;&#10;        const val DURATION = &quot;October 2024 – December 2024&quot;&#10;        const val LOCATION = &quot;Remote&quot;&#10;        &#10;        val responsibilities = listOf(&#10;            &quot;Created UI forms for apps as per client requirement&quot;,&#10;            &quot;Integrated 10+ backend APIs to the frontend of different apps&quot;,&#10;            &quot;Collaborated with a team of 10+ developers to create apps as per requirements&quot;&#10;        )&#10;        &#10;        val technologies = listOf(&#10;            &quot;Kotlin&quot;,&#10;            &quot;Android SDK&quot;,&#10;            &quot;REST APIs&quot;, &#10;            &quot;UI/UX Development&quot;,&#10;            &quot;Team Collaboration&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                createExtracurricularFolder()&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createExtracurricularFolder(): FileNode {&#10;        return FileNode(&#10;            name = &quot;extracurricular&quot;,&#10;            type = FileType.FOLDER,&#10;            children = listOf(&#10;                FileNode(&#10;                    name = &quot;DSC_KIET.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * DSC KIET - Android Lead Experience&#10; * &#10; * Organization: Developer Student Clubs (DSC) KIET&#10; * Duration: March 2023 – Present&#10; * Role: Android Lead&#10; * Institution: KIET Group of Institutions&#10; * &#10; * Key Contributions:&#10; * - Collaborated with a 7-member team on Android development projects&#10; * - Participated in hackathons, tech talks, coding contests, and KotlinConf Global&#10; * - Organized an offline hackathon, a 4-day Android bootcamp with 30+ attendees, and a Git/GitHub workshop&#10; * &#10; * Leadership &amp; Impact: Led Android development initiatives and mentored fellow students&#10; */&#10;&#10;package org.yashvant.portfolio.experience.extracurricular&#10;&#10;class DSCKIETExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Android Lead&quot;&#10;        const val ORGANIZATION = &quot;DSC KIET&quot;&#10;        const val DURATION = &quot;March 2023 – Present&quot;&#10;        const val INSTITUTION = &quot;KIET Group of Institutions&quot;&#10;        &#10;        val achievements = listOf(&#10;            &quot;Collaborated with a 7-member team on Android development projects&quot;,&#10;            &quot;Participated in hackathons, tech talks, coding contests, and KotlinConf Global&quot;,&#10;            &quot;Organized an offline hackathon with significant participation&quot;,&#10;            &quot;Conducted a 4-day Android bootcamp with 30+ attendees&quot;,&#10;            &quot;Led Git/GitHub workshop for fellow students&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;NSCC_KIET.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * NSCC KIET - Java Team Member Experience&#10; * &#10; * Organization: Newton School Coding Club (NSCC) KIET&#10; * Duration: March 2024 – Present&#10; * Role: Java Team Member&#10; * Institution: KIET Group of Institutions&#10; * &#10; * Key Contributions:&#10; * - Built projects and held lectures on Spring Boot teaching juniors&#10; * - Focused on backend development and Java ecosystem&#10; * &#10; * Technologies: Java, Spring Boot, Backend Development&#10; */&#10;&#10;package org.yashvant.portfolio.experience.extracurricular&#10;&#10;class NSCCKIETExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Java Team Member&quot;&#10;        const val ORGANIZATION = &quot;NSCC KIET&quot;&#10;        const val DURATION = &quot;March 2024 – Present&quot;&#10;        const val INSTITUTION = &quot;KIET Group of Institutions&quot;&#10;        &#10;        val contributions = listOf(&#10;            &quot;Built projects using Java and Spring Boot&quot;,&#10;            &quot;Held lectures on Spring Boot framework&quot;,&#10;            &quot;Taught and mentored junior students&quot;,&#10;            &quot;Contributed to backend development initiatives&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;FOSSCU.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * FOSSCU - Spring Boot/Android Developer Experience&#10; * &#10; * Organization: Free and Open Source Software Community (FOSSCU)&#10; * Duration: April 2024 – Present&#10; * Role: Spring Boot/Android Developer&#10; * Institution: KIET Group of Institutions&#10; * &#10; * Key Contributions:&#10; * - Contributed to 5+ open-source projects involving Spring Boot and Android&#10; * - Active participant in open source community initiatives&#10; * &#10; * Technologies: Spring Boot, Android, Open Source Development&#10; */&#10;&#10;package org.yashvant.portfolio.experience.extracurricular&#10;&#10;class FOSSCUExperience {&#10;    companion object {&#10;        const val ROLE = &quot;Spring Boot/Android Developer&quot;&#10;        const val ORGANIZATION = &quot;FOSSCU&quot;&#10;        const val DURATION = &quot;April 2024 – Present&quot;&#10;        const val INSTITUTION = &quot;KIET Group of Institutions&quot;&#10;        &#10;        val contributions = listOf(&#10;            &quot;Contributed to 5+ open-source projects&quot;,&#10;            &quot;Specialized in Spring Boot backend development&quot;,&#10;            &quot;Android application development&quot;,&#10;            &quot;Active community participant and contributor&quot;&#10;        )&#10;    }&#10;}&quot;&quot;&quot;&#10;                )&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createProjectsFolder(): FileNode {&#10;        val zyptraProject = Project(&#10;            name = &quot;Zyptra&quot;,&#10;            description = &quot;Developed a full-fledged Android application backup solution allowing users to extract and backup APKs to Google Drive&quot;,&#10;            techStack = &quot;Kotlin, Jetpack Compose, Clean Architecture, Google Drive API, Hilt&quot;,&#10;            link = &quot;https://github.com/yashvant/zyptra&quot;,&#10;            demoType = ProjectDemoType.APP_BACKUP&#10;        )&#10;&#10;        val imgcProject = Project(&#10;            name = &quot;ImGC&quot;,&#10;            description = &quot;Developed an app allowing users to receive contextual descriptions and perform conversational Q&amp;A about any image from their gallery&quot;,&#10;            techStack = &quot;Kotlin, Jetpack Compose, Gemini-Vision API, MVVM&quot;,&#10;            link = &quot;https://github.com/yashvant/imgc&quot;,&#10;            demoType = ProjectDemoType.IMAGE_ANALYSIS&#10;        )&#10;&#10;        val codevProject = Project(&#10;            name = &quot;Codev&quot;,&#10;            description = &quot;Built a collaborative platform for developers, enabling users to share and showcase projects with project matching and team-formation features&quot;,&#10;            techStack = &quot;Kotlin, Jetpack Compose, Firebase, Dagger-Hilt, MVVM&quot;,&#10;            link = &quot;https://github.com/yashvant/codev&quot;,&#10;            demoType = ProjectDemoType.GITHUB_LINK&#10;        )&#10;&#10;        val diaenshoProject = Project(&#10;            name = &quot;Diaensho&quot;,&#10;            description = &quot;Engineered an AI-powered audio diary to capture and summarize spoken thoughts, featuring an always-on hotword listener built with a persistent Foreground Service&quot;,&#10;            techStack = &quot;Kotlin, Jetpack Compose, Coroutines, Hilt, Room, WorkManager&quot;,&#10;            link = &quot;https://github.com/yashvant/diaensho&quot;,&#10;            demoType = ProjectDemoType.GITHUB_LINK&#10;        )&#10;&#10;        return FileNode(&#10;            name = &quot;projects&quot;,&#10;            type = FileType.FOLDER,&#10;            isExpanded = true,&#10;            children = listOf(&#10;                FileNode(&#10;                    name = &quot;Zyptra.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    hasRunButton = true,&#10;                    project = zyptraProject,&#10;                    content = &quot;&quot;&quot;/**&#10; * Zyptra - Android Application Backup Solution&#10; * Project Duration: May 2025 - June 2025&#10; * &#10; * Description:&#10; * Developed a full-fledged Android application backup solution allowing users to extract &#10; * and backup APKs to Google Drive. Engineered the app using Clean Architecture principles &#10; * with MVVM for a highly scalable and maintainable codebase.&#10; * &#10; * Features:&#10; * - Extract and backup APK files from installed applications&#10; * - Google Drive integration for cloud storage&#10; * - Clean Architecture with MVVM pattern&#10; * - Dependency injection using Hilt&#10; * - Material Design UI with Jetpack Compose&#10; * &#10; * Tech Stack: Kotlin, Jetpack Compose, Clean Architecture, Google Drive API, Hilt&#10; */&#10;&#10;package org.yashvant.portfolio.projects&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;&#10;class ZyptraProject {&#10;    companion object {&#10;        const val NAME = &quot;Zyptra&quot;&#10;        const val DURATION = &quot;May 2025 - June 2025&quot;&#10;        const val DESCRIPTION = &quot;Android Application Backup Solution&quot;&#10;        const val TECH_STACK = &quot;Kotlin, Jetpack Compose, Clean Architecture, Google Drive API, Hilt&quot;&#10;    }&#10;    &#10;    fun extractApks(): List&lt;String&gt; {&#10;        // APK extraction logic would be implemented here&#10;        return listOf(&quot;app1.apk&quot;, &quot;app2.apk&quot;, &quot;app3.apk&quot;)&#10;    }&#10;    &#10;    fun backupToGoogleDrive(apks: List&lt;String&gt;) {&#10;        // Google Drive backup logic would be implemented here&#10;        println(&quot;Backing up ${&quot;$&quot;}{apks.size} APKs to Google Drive...&quot;)&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;ImGC.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    hasRunButton = true,&#10;                    project = imgcProject,&#10;                    content = &quot;&quot;&quot;/**&#10; * ImGC - Image Analysis with Gemini Vision API&#10; * Project Duration: March 2024 - April 2024&#10; * &#10; * Description:&#10; * Developed an app allowing users to receive contextual descriptions and perform &#10; * conversational Q&amp;A about any image from their gallery. Integrated the Google &#10; * Gemini-Vision Pro API to power the core visual understanding and analysis features.&#10; * &#10; * Features:&#10; * - Image selection from gallery&#10; * - Contextual image descriptions using Gemini Vision&#10; * - Conversational Q&amp;A about image content&#10; * - Real-time image analysis&#10; * - MVVM architecture for clean code structure&#10; * &#10; * Tech Stack: Kotlin, Jetpack Compose, Gemini-Vision API, MVVM&#10; */&#10;&#10;package org.yashvant.portfolio.projects&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;&#10;class ImGCProject {&#10;    companion object {&#10;        const val NAME = &quot;ImGC&quot;&#10;        const val DURATION = &quot;March 2024 - April 2024&quot;&#10;        const val DESCRIPTION = &quot;Image Analysis with Gemini Vision API&quot;&#10;        const val TECH_STACK = &quot;Kotlin, Jetpack Compose, Gemini-Vision API, MVVM&quot;&#10;    }&#10;    &#10;    suspend fun analyzeImage(imageUri: String): String {&#10;        // Gemini Vision API integration would be implemented here&#10;        return &quot;Image analysis completed successfully&quot;&#10;    }&#10;    &#10;    fun generateImageDescription(imageData: ByteArray): String {&#10;        // Image description generation logic&#10;        return &quot;Generated contextual description of the image&quot;&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;Codev.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    hasRunButton = true,&#10;                    project = codevProject,&#10;                    content = &quot;&quot;&quot;/**&#10; * Codev - Collaborative Development Platform&#10; * Project Duration: November 2023 - April 2024&#10; * &#10; * Description:&#10; * Built a collaborative platform for developers, enabling users to share and showcase &#10; * projects. Enhanced collaboration by introducing project matching and team-formation &#10; * features for better developer networking.&#10; * &#10; * Features:&#10; * - Developer project showcase platform&#10; * - Project matching algorithm&#10; * - Team formation features&#10; * - Real-time collaboration tools&#10; * - Firebase backend integration&#10; * &#10; * Tech Stack: Kotlin, Jetpack Compose, Firebase, Dagger-Hilt, MVVM&#10; */&#10;&#10;package org.yashvant.portfolio.projects&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;&#10;class CodevProject {&#10;    companion object {&#10;        const val NAME = &quot;Codev&quot;&#10;        const val DURATION = &quot;November 2023 - April 2024&quot;&#10;        const val DESCRIPTION = &quot;Collaborative Development Platform&quot;&#10;        const val TECH_STACK = &quot;Kotlin, Jetpack Compose, Firebase, Dagger-Hilt, MVVM&quot;&#10;    }&#10;    &#10;    fun matchProjects(userSkills: List&lt;String&gt;): List&lt;String&gt; {&#10;        // Project matching algorithm implementation&#10;        return listOf(&quot;Android Project&quot;, &quot;Web Development&quot;, &quot;AI/ML Project&quot;)&#10;    }&#10;    &#10;    fun formTeam(projectId: String, developers: List&lt;String&gt;) {&#10;        // Team formation logic&#10;        println(&quot;Team formed for project: $projectId&quot;)&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;Diaensho.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    hasRunButton = true,&#10;                    project = diaenshoProject,&#10;                    content = &quot;&quot;&quot;/**&#10; * Diaensho - AI-Powered Audio Diary&#10; * Project Duration: July 2025 - Present&#10; * &#10; * Description:&#10; * Engineered an AI-powered audio diary to capture and summarize spoken thoughts, &#10; * featuring an always-on hotword listener built with a persistent Foreground Service.&#10; * Implemented an offline-first architecture using Room and managed complex background &#10; * tasks for habit tracking and data sync with WorkManager.&#10; * &#10; * Features:&#10; * - AI-powered audio diary with speech recognition&#10; * - Always-on hotword listener with Foreground Service&#10; * - Offline-first architecture using Room database&#10; * - Background task management with WorkManager&#10; * - Habit tracking and data synchronization&#10; * &#10; * Tech Stack: Kotlin, Jetpack Compose, Coroutines, Hilt, Room, WorkManager&#10; */&#10;&#10;package org.yashvant.portfolio.projects&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;&#10;class DiaenshoProject {&#10;    companion object {&#10;        const val NAME = &quot;Diaensho&quot;&#10;        const val DURATION = &quot;July 2025 - Present&quot;&#10;        const val DESCRIPTION = &quot;AI-Powered Audio Diary&quot;&#10;        const val TECH_STACK = &quot;Kotlin, Jetpack Compose, Coroutines, Hilt, Room, WorkManager&quot;&#10;    }&#10;    &#10;    fun startHotwordListener() {&#10;        // Foreground service for hotword detection&#10;        println(&quot;Hotword listener started in foreground service&quot;)&#10;    }&#10;    &#10;    fun captureAndSummarize(audioData: ByteArray): String {&#10;        // AI-powered audio processing and summarization&#10;        return &quot;Audio captured and summarized successfully&quot;&#10;    }&#10;    &#10;    fun syncData() {&#10;        // WorkManager background sync implementation&#10;        println(&quot;Data sync scheduled with WorkManager&quot;)&#10;    }&#10;}&quot;&quot;&quot;&#10;                )&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createSkillsFolder(): FileNode {&#10;        return FileNode(&#10;            name = &quot;skills&quot;,&#10;            type = FileType.FOLDER,&#10;            children = listOf(&#10;                FileNode(&#10;                    name = &quot;languages.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * Programming Languages&#10; */&#10;&#10;package org.yashvant.portfolio.skills&#10;&#10;object ProgrammingLanguages {&#10;    val languages = listOf(&#10;        &quot;Kotlin&quot;,&#10;        &quot;Java&quot;, &#10;        &quot;C&quot;,&#10;        &quot;C++&quot;,&#10;        &quot;JavaScript&quot;,&#10;        &quot;Python&quot;,&#10;        &quot;Dart&quot;&#10;    )&#10;    &#10;    fun getExpertiseLevel(language: String): String {&#10;        return when (language) {&#10;            &quot;Kotlin&quot;, &quot;Java&quot; -&gt; &quot;Expert&quot;&#10;            &quot;Python&quot;, &quot;JavaScript&quot; -&gt; &quot;Advanced&quot;&#10;            &quot;C&quot;, &quot;C++&quot;, &quot;Dart&quot; -&gt; &quot;Intermediate&quot;&#10;            else -&gt; &quot;Beginner&quot;&#10;        }&#10;    }&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;frameworks.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * Frameworks and Technologies&#10; */&#10;&#10;package org.yashvant.portfolio.skills&#10;&#10;object FrameworksAndTechnologies {&#10;    val frameworks = listOf(&#10;        &quot;Android&quot;,&#10;        &quot;Full Stack Web&quot;,&#10;        &quot;Flutter&quot;,&#10;        &quot;Spring Boot&quot;,&#10;        &quot;Docker&quot;,&#10;        &quot;GitHub&quot;,&#10;        &quot;Firebase&quot;&#10;    )&#10;    &#10;    val webTechnologies = listOf(&#10;        &quot;HTML5&quot;,&#10;        &quot;CSS3&quot;,&#10;        &quot;JavaScript&quot;,&#10;        &quot;React&quot;,&#10;        &quot;Node.js&quot;&#10;    )&#10;    &#10;    val databases = listOf(&#10;        &quot;SQLite&quot;,&#10;        &quot;Room Database&quot;,&#10;        &quot;Firebase Firestore&quot;,&#10;        &quot;MySQL&quot;&#10;    )&#10;}&quot;&quot;&quot;&#10;                ),&#10;                FileNode(&#10;                    name = &quot;tools.kt&quot;,&#10;                    type = FileType.KOTLIN_FILE,&#10;                    content = &quot;&quot;&quot;/**&#10; * Development Tools&#10; */&#10;&#10;package org.yashvant.portfolio.skills&#10;&#10;object DevelopmentTools {&#10;    val editors = listOf(&#10;        &quot;Vim&quot;,&#10;        &quot;VS Code&quot;,&#10;        &quot;IntelliJ IDEA&quot;,&#10;        &quot;Android Studio&quot;&#10;    )&#10;    &#10;    val versionControl = listOf(&#10;        &quot;Git&quot;,&#10;        &quot;GitHub&quot;,&#10;        &quot;GitLab&quot;&#10;    )&#10;    &#10;    val cloudPlatforms = listOf(&#10;        &quot;Google Cloud Platform (GCP)&quot;,&#10;        &quot;Firebase&quot;,&#10;        &quot;AWS (Basic)&quot;&#10;    )&#10;    &#10;    val designTools = listOf(&#10;        &quot;Figma&quot;,&#10;        &quot;Adobe XD&quot;,&#10;        &quot;Sketch&quot;&#10;    )&#10;}&quot;&quot;&quot;&#10;                )&#10;            )&#10;        )&#10;    }&#10;&#10;    private fun createAchievementsFile(): FileNode {&#10;        return FileNode(&#10;            name = &quot;achievements.md&quot;,&#10;            type = FileType.MARKDOWN_FILE,&#10;            content = &quot;&quot;&quot;# Achievements&#10;&#10;##  Competitions &amp; Recognition&#10;&#10;### NASA Space Apps Challenge 2023 - Winner&#10;- Won the prestigious NASA Space Apps Challenge 2023&#10;- Developed innovative solution for space-related challenges&#10;- Collaborated with international team of developers&#10;&#10;### Competitive Programming&#10;- **Codechef Rating**: Maximum rating of 1427&#10;- **Problem Solving**: 500+ problems solved across platforms&#10;  - LeetCode: Advanced problem solving&#10;  - GeeksforGeeks: Data structures and algorithms&#10;  - CodeChef: Competitive programming contests&#10;&#10;##  Technical Milestones&#10;&#10;### Open Source Contributions&#10;- Active contributor to Android and Kotlin communities&#10;- Multiple projects showcased on GitHub&#10;- Mentored junior developers in mobile app development&#10;&#10;### Academic Excellence&#10;- Strong academic performance in Computer Science&#10;- Specialized in Mobile Application Development&#10;- Research interests in AI/ML and Computer Vision&#10;&quot;&quot;&quot;&#10;        )&#10;    }&#10;&#10;    private fun createReadmeFile(): FileNode {&#10;        return FileNode(&#10;            name = &quot;README.md&quot;,&#10;            type = FileType.MARKDOWN_FILE,&#10;            content = &quot;&quot;&quot;# Yashvant Yadav - Android Developer Portfolio&#10;&#10;## ‍ About Me&#10;&#10;**Name**: Yashvant Yadav  &#10;**Location**: Delhi NCR, Ghaziabad, 201206  &#10;**Specialization**: Android Development  &#10;**Education**: B.Tech in Computer Science (CGPA: 8.5/10) - KIET Group of Institutions (Nov 2022 - June 2026)&#10;&#10;##  Contact Information&#10;&#10;**Email**: yashvantyadav855@gmail.com  &#10;**Academic Email**: yashvant.2226cs1026@kiet.edu  &#10;**Phone**: +91 8090161990  &#10;&#10;##  Links&#10;&#10;**LinkedIn**: [Connect with me on LinkedIn](https://linkedin.com/in/yashvant-yadav)  &#10;**GitHub**: [View my repositories](https://github.com/yashvant-yadav)  &#10;&#10;##  Professional Summary&#10;&#10;Passionate Android Developer with expertise in Kotlin and modern Android development practices. &#10;Currently working as a Kotlin Intern at AGOMUC, with previous experience at DAPS as an Android &#10;Developer Intern. Experienced in building scalable mobile applications using MVVM architecture, &#10;Jetpack Compose, and contemporary Android development tools.&#10;&#10;##  Current Experience&#10;&#10;- **Kotlin Intern (Paid)** at AGOMUC (May 2025 - Present) - Hybrid&#10;- **Android Developer Intern (Paid)** at DAPS (Oct 2024 - Dec 2024) - Remote&#10;&#10;##  Notable Achievements&#10;&#10;- **NASA Space Apps Challenge 2023 - Winner**&#10;- **CodeChef Max Rating**: 1427&#10;- **Problem Solving**: 500+ problems solved on LeetCode, GeeksforGeeks, and CodeChef&#10;&#10;##  Core Competencies&#10;&#10;- **Languages**: Kotlin, Java, C, C++, JavaScript, Python, Dart&#10;- **Technologies/Frameworks**: Android, Full Stack Web, Flutter, Spring Boot, Docker, GitHub, Firebase&#10;- **Tools**: Vim, VS Code, IntelliJ IDEA, Android Studio, Git, GCP&#10;- **Architecture**: MVVM, Clean Architecture, Dependency Injection&#10;- **UI/UX**: Jetpack Compose, Material Design, Custom Views&#10;&#10;##  Featured Projects&#10;&#10;### Zyptra (May 2025 - June 2025)&#10;Android application backup solution with Google Drive integration&#10;*Tech Stack: Kotlin, Jetpack Compose, Clean Architecture, Google Drive API, Hilt*&#10;&#10;### ImGC (March 2024 - April 2024)  &#10;Image analysis app powered by Gemini Vision API&#10;*Tech Stack: Kotlin, Jetpack Compose, Gemini-Vision API, MVVM*&#10;&#10;### Codev (November 2023 - April 2024)&#10;Collaborative platform for developers with project matching features&#10;*Tech Stack: Kotlin, Jetpack Compose, Firebase, Dagger-Hilt, MVVM*&#10;&#10;### Diaensho (July 2025 - Present)&#10;AI-powered audio diary with always-on hotword listener&#10;*Tech Stack: Kotlin, Jetpack Compose, Coroutines, Hilt, Room, WorkManager*&#10;&#10;---&#10;&#10;*Welcome to my portfolio! Explore the file tree to learn more about my experience, projects, and skills.*&#10;&quot;&quot;&quot;&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;androidx-lifecycle = &quot;2.9.1&quot;&#10;composeMultiplatform = &quot;1.8.2&quot;&#10;junit = &quot;4.13.2&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;&#10;[libraries]&#10;kotlin-test = { module = &quot;org.jetbrains.kotlin:kotlin-test&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-testJunit = { module = &quot;org.jetbrains.kotlin:kotlin-test-junit&quot;, version.ref = &quot;kotlin&quot; }&#10;junit = { module = &quot;junit:junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-lifecycle-viewmodelCompose = { module = &quot;org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose&quot;, version.ref = &quot;androidx-lifecycle&quot; }&#10;androidx-lifecycle-runtimeCompose = { module = &quot;org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose&quot;, version.ref = &quot;androidx-lifecycle&quot; }&#10;&#10;[plugins]&#10;composeMultiplatform = { id = &quot;org.jetbrains.compose&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;composeCompiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlinMultiplatform = { id = &quot;org.jetbrains.kotlin.multiplatform&quot;, version.ref = &quot;kotlin&quot; }" />
              <option name="updatedContent" value="[versions]&#10;androidx-lifecycle = &quot;2.9.1&quot;&#10;composeMultiplatform = &quot;1.8.2&quot;&#10;junit = &quot;4.13.2&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;&#10;[libraries]&#10;kotlin-test = { module = &quot;org.jetbrains.kotlin:kotlin-test&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-testJunit = { module = &quot;org.jetbrains.kotlin:kotlin-test-junit&quot;, version.ref = &quot;kotlin&quot; }&#10;junit = { module = &quot;junit:junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-lifecycle-viewmodelCompose = { module = &quot;org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose&quot;, version.ref = &quot;androidx-lifecycle&quot; }&#10;androidx-lifecycle-runtimeCompose = { module = &quot;org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose&quot;, version.ref = &quot;androidx-lifecycle&quot; }&#10;androidx-compose-ui = { module = &quot;androidx.compose.ui:ui&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-material = { module = &quot;androidx.compose.material:material&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-ui-tooling = { module = &quot;androidx.compose.ui:ui-tooling&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-runtime = { module = &quot;androidx.compose.runtime:runtime&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-foundation = { module = &quot;androidx.compose.foundation:foundation&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-layout = { module = &quot;androidx.compose.layout:layout&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-material-icons-core = { module = &quot;androidx.compose.material:material-icons-core&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-material-icons-extended = { module = &quot;androidx.compose.material:material-icons-extended&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-navigation = { module = &quot;androidx.navigation:navigation-compose&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;&#10;[plugins]&#10;composeMultiplatform = { id = &quot;org.jetbrains.compose&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;composeCompiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlinMultiplatform = { id = &quot;org.jetbrains.kotlin.multiplatform&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>