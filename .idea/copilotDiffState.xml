<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/FileExplorerView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/FileExplorerView.kt" />
              <option name="originalContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import org.yashvant.portofolio.data.FileNode&#10;import org.yashvant.portofolio.data.FileType&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun FileExplorerView(&#10;    fileTree: FileNode,&#10;    onFileClicked: (FileNode) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxHeight()&#10;            .widthIn(min = 250.dp, max = 350.dp)&#10;            .background(DarculaColors.Surface)&#10;            .border(1.dp, DarculaColors.TabBorder)&#10;    ) {&#10;        // Explorer header&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(DarculaColors.SurfaceVariant)&#10;                .padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Folder,&#10;                contentDescription = &quot;Explorer&quot;,&#10;                tint = DarculaColors.FolderIcon,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;EXPLORER&quot;,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;        }&#10;        &#10;        // File tree&#10;        LazyColumn(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            items(flattenFileTree(fileTree)) { (node, depth) -&gt;&#10;                FileTreeItem(&#10;                    fileNode = node,&#10;                    depth = depth,&#10;                    onClicked = { onFileClicked(node) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FileTreeItem(&#10;    fileNode: FileNode,&#10;    depth: Int,&#10;    onClicked: () -&gt; Unit&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClicked() }&#10;            .padding(start = (depth * 20).dp, top = 2.dp, bottom = 2.dp, end = 8.dp)&#10;            .height(24.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Folder expand/collapse icon&#10;        if (fileNode.type == FileType.FOLDER) {&#10;            Icon(&#10;                imageVector = if (fileNode.isExpanded) Icons.Default.KeyboardArrowDown else Icons.Default.KeyboardArrowRight,&#10;                contentDescription = if (fileNode.isExpanded) &quot;Collapse&quot; else &quot;Expand&quot;,&#10;                tint = DarculaColors.OnSurface,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;        } else {&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.width(4.dp))&#10;        &#10;        // File/folder icon&#10;        Icon(&#10;            imageVector = getFileIcon(fileNode),&#10;            contentDescription = null,&#10;            tint = getFileIconColor(fileNode),&#10;            modifier = Modifier.size(16.dp)&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        &#10;        // File/folder name&#10;        Text(&#10;            text = fileNode.name,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;    }&#10;}&#10;&#10;private fun getFileIcon(fileNode: FileNode): ImageVector {&#10;    return when {&#10;        fileNode.type == FileType.FOLDER -&gt; Icons.Default.Folder&#10;        fileNode.name.endsWith(&quot;.kt&quot;) -&gt; Icons.Default.Code&#10;        fileNode.name.endsWith(&quot;.md&quot;) -&gt; Icons.Default.Description&#10;        else -&gt; Icons.Default.InsertDriveFile&#10;    }&#10;}&#10;&#10;private fun getFileIconColor(fileNode: FileNode): Color {&#10;    return when {&#10;        fileNode.type == FileType.FOLDER -&gt; DarculaColors.FolderIcon&#10;        fileNode.name.endsWith(&quot;.kt&quot;) -&gt; DarculaColors.KotlinFileIcon&#10;        fileNode.name.endsWith(&quot;.md&quot;) -&gt; DarculaColors.MarkdownFileIcon&#10;        else -&gt; DarculaColors.OnSurface&#10;    }&#10;}&#10;&#10;private fun flattenFileTree(node: FileNode, depth: Int = 0): List&lt;Pair&lt;FileNode, Int&gt;&gt; {&#10;    val result = mutableListOf&lt;Pair&lt;FileNode, Int&gt;&gt;()&#10;    result.add(node to depth)&#10;    &#10;    if (node.type == FileType.FOLDER &amp;&amp; node.isExpanded) {&#10;        node.children.forEach { child -&gt;&#10;            result.addAll(flattenFileTree(child, depth + 1))&#10;        }&#10;    }&#10;    &#10;    return result&#10;}&#10;" />
              <option name="updatedContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import org.yashvant.portofolio.data.FileNode&#10;import org.yashvant.portofolio.data.FileType&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun FileExplorerView(&#10;    fileTree: FileNode,&#10;    onFileClicked: (FileNode) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    BoxWithConstraints(&#10;        modifier = modifier&#10;    ) {&#10;        val isMobile = maxWidth &lt; 600.dp&#10;        &#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxHeight()&#10;                .then(&#10;                    if (isMobile) Modifier.fillMaxWidth()&#10;                    else Modifier.widthIn(min = 250.dp, max = 350.dp)&#10;                )&#10;                .background(DarculaColors.Surface)&#10;                .border(1.dp, DarculaColors.TabBorder)&#10;        ) {&#10;            // Explorer header&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .background(DarculaColors.SurfaceVariant)&#10;                    .padding(if (isMobile) 12.dp else 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Folder,&#10;                    contentDescription = &quot;Explorer&quot;,&#10;                    tint = DarculaColors.FolderIcon,&#10;                    modifier = Modifier.size(if (isMobile) 20.dp else 16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;EXPLORER&quot;,&#10;                    style = if (isMobile) MaterialTheme.typography.titleSmall else MaterialTheme.typography.labelMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = DarculaColors.OnSurface&#10;                )&#10;            }&#10;            &#10;            // File tree&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentPadding = if (isMobile) PaddingValues(4.dp) else PaddingValues(0.dp)&#10;            ) {&#10;                items(flattenFileTree(fileTree)) { (node, depth) -&gt;&#10;                    FileTreeItem(&#10;                        fileNode = node,&#10;                        depth = depth,&#10;                        isMobile = isMobile,&#10;                        onClicked = { onFileClicked(node) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FileTreeItem(&#10;    fileNode: FileNode,&#10;    depth: Int,&#10;    isMobile: Boolean,&#10;    onClicked: () -&gt; Unit&#10;) {&#10;    val itemHeight = if (isMobile) 32.dp else 24.dp&#10;    val indentSize = if (isMobile) 24.dp else 20.dp&#10;    val iconSize = if (isMobile) 20.dp else 16.dp&#10;    &#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClicked() }&#10;            .padding(&#10;                start = (depth * indentSize.value).dp, &#10;                top = if (isMobile) 4.dp else 2.dp, &#10;                bottom = if (isMobile) 4.dp else 2.dp, &#10;                end = if (isMobile) 12.dp else 8.dp&#10;            )&#10;            .height(itemHeight),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Folder expand/collapse icon&#10;        if (fileNode.type == FileType.FOLDER) {&#10;            Icon(&#10;                imageVector = if (fileNode.isExpanded) Icons.Default.KeyboardArrowDown else Icons.Default.KeyboardArrowRight,&#10;                contentDescription = if (fileNode.isExpanded) &quot;Collapse&quot; else &quot;Expand&quot;,&#10;                tint = DarculaColors.OnSurface,&#10;                modifier = Modifier.size(iconSize)&#10;            )&#10;        } else {&#10;            Spacer(modifier = Modifier.width(iconSize))&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.width(4.dp))&#10;        &#10;        // File/folder icon&#10;        Icon(&#10;            imageVector = getFileIcon(fileNode),&#10;            contentDescription = null,&#10;            tint = getFileIconColor(fileNode),&#10;            modifier = Modifier.size(iconSize)&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        &#10;        // File/folder name&#10;        Text(&#10;            text = fileNode.name,&#10;            style = if (isMobile) MaterialTheme.typography.bodyLarge else MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.OnSurface,&#10;            maxLines = 1,&#10;            overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;        )&#10;    }&#10;}&#10;&#10;private fun getFileIcon(fileNode: FileNode): ImageVector {&#10;    return when {&#10;        fileNode.type == FileType.FOLDER -&gt; Icons.Default.Folder&#10;        fileNode.name.endsWith(&quot;.kt&quot;) -&gt; Icons.Default.Code&#10;        fileNode.name.endsWith(&quot;.md&quot;) -&gt; Icons.Default.Description&#10;        else -&gt; Icons.Default.InsertDriveFile&#10;    }&#10;}&#10;&#10;private fun getFileIconColor(fileNode: FileNode): Color {&#10;    return when {&#10;        fileNode.type == FileType.FOLDER -&gt; DarculaColors.FolderIcon&#10;        fileNode.name.endsWith(&quot;.kt&quot;) -&gt; DarculaColors.KotlinFileIcon&#10;        fileNode.name.endsWith(&quot;.md&quot;) -&gt; DarculaColors.MarkdownFileIcon&#10;        else -&gt; DarculaColors.OnSurface&#10;    }&#10;}&#10;&#10;private fun flattenFileTree(node: FileNode, depth: Int = 0): List&lt;Pair&lt;FileNode, Int&gt;&gt; {&#10;    val result = mutableListOf&lt;Pair&lt;FileNode, Int&gt;&gt;()&#10;    result.add(node to depth)&#10;    &#10;    if (node.type == FileType.FOLDER &amp;&amp; node.isExpanded) {&#10;        node.children.forEach { child -&gt;&#10;            result.addAll(flattenFileTree(child, depth + 1))&#10;        }&#10;    }&#10;    &#10;    return result&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/ProjectDemoDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/wasmJsMain/kotlin/org/yashvant/portofolio/ui/components/ProjectDemoDialog.kt" />
              <option name="originalContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.*&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import org.yashvant.portofolio.data.Project&#10;import org.yashvant.portofolio.data.ProjectDemoType&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun ProjectDemoDialog(&#10;    project: Project,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.8f)&#10;                .fillMaxHeight(0.8f),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = DarculaColors.Surface&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                // Header&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .background(DarculaColors.SurfaceVariant)&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${project.name} - Demo&quot;,&#10;                        style = MaterialTheme.typography.displayMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = DarculaColors.OnSurface&#10;                    )&#10;&#10;                    IconButton(onClick = onDismiss) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Close,&#10;                            contentDescription = &quot;Close&quot;,&#10;                            tint = DarculaColors.OnSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Content based on demo type&#10;                when (project.demoType) {&#10;                    ProjectDemoType.IMAGE_ANALYSIS -&gt; ImageAnalysisDemo()&#10;                    ProjectDemoType.APP_BACKUP -&gt; AppBackupDemo()&#10;                    ProjectDemoType.GITHUB_LINK -&gt; GitHubLinkDemo(project)&#10;                    ProjectDemoType.LINK -&gt; GitHubLinkDemo(project)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ImageAnalysisDemo() {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Left side - Sample image&#10;        Column(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxHeight()&#10;        ) {&#10;            Text(&#10;                text = &quot;Sample Image&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;                    .background(DarculaColors.Background)&#10;                    .border(2.dp, DarculaColors.Primary),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Image,&#10;                        contentDescription = &quot;Sample Image&quot;,&#10;                        tint = DarculaColors.Primary,&#10;                        modifier = Modifier.size(64.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Sample Photo&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = DarculaColors.Comment&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Primary&#10;                ),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Analytics,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Analyze with Gemini Vision&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;&#10;        // Right side - Analysis result&#10;        Column(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxHeight()&#10;        ) {&#10;            Text(&#10;                text = &quot;Gemini Vision Analysis&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxSize(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = DarculaColors.Background&#10;                )&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier.padding(12.dp)&#10;                ) {&#10;                    item {&#10;                        Text(&#10;                            text = &quot;Analysis Results:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = DarculaColors.Keyword&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Object Detection: Mobile phone, person, indoor environment&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Scene Understanding: Technology demonstration in indoor setting&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Text Recognition: No visible text detected&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Confidence Score: 94.7%&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.Number&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        Text(&#10;                            text = &quot;Accessibility Description:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = DarculaColors.Keyword&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;\&quot;A person is holding a smartphone displaying an application interface. The setting appears to be indoors with good lighting, suitable for app demonstration purposes.\&quot;&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.String&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AppBackupDemo() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;App Backup Manager&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Select apps to backup:&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        val sampleApps = listOf(&#10;            &quot;WhatsApp&quot; to true,&#10;            &quot;Instagram&quot; to false,&#10;            &quot;Gmail&quot; to true,&#10;            &quot;Chrome&quot; to false,&#10;            &quot;Spotify&quot; to true,&#10;            &quot;Netflix&quot; to false,&#10;            &quot;YouTube&quot; to true,&#10;            &quot;Maps&quot; to false&#10;        )&#10;&#10;        LazyColumn(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            items(sampleApps) { (appName, isSelected) -&gt;&#10;                var checked by remember { mutableStateOf(isSelected) }&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { checked = !checked }&#10;                        .padding(vertical = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Checkbox(&#10;                        checked = checked,&#10;                        onCheckedChange = { checked = it },&#10;                        colors = CheckboxDefaults.colors(&#10;                            checkedColor = DarculaColors.Primary,&#10;                            uncheckedColor = DarculaColors.Comment&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    Icon(&#10;                        imageVector = Icons.Default.Android,&#10;                        contentDescription = null,&#10;                        tint = DarculaColors.Primary,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                    Text(&#10;                        text = appName,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = DarculaColors.OnSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Primary&#10;                ),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CloudUpload,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Backup to Google Drive&quot;)&#10;            }&#10;&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Secondary&#10;                ),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CloudDownload,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Restore from Backup&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun GitHubLinkDemo(project: Project) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Code,&#10;            contentDescription = null,&#10;            tint = DarculaColors.Primary,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = project.name,&#10;            style = MaterialTheme.typography.displayMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = project.description,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Tech Stack: ${project.techStack}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.Comment&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = { /* Open GitHub link */ },&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = DarculaColors.Primary&#10;            )&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.OpenInNew,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;View on GitHub&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.yashvant.portofolio.ui.components&#10;&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import org.yashvant.portofolio.data.Project&#10;import org.yashvant.portofolio.data.ProjectDemoType&#10;import org.yashvant.portofolio.ui.theme.DarculaColors&#10;&#10;@Composable&#10;fun ProjectDemoDialog(&#10;    project: Project,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.8f)&#10;                .fillMaxHeight(0.8f),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = DarculaColors.Surface&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                // Header&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .background(DarculaColors.SurfaceVariant)&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${project.name} - Demo&quot;,&#10;                        style = MaterialTheme.typography.displayMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = DarculaColors.OnSurface&#10;                    )&#10;&#10;                    IconButton(onClick = onDismiss) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Close,&#10;                            contentDescription = &quot;Close&quot;,&#10;                            tint = DarculaColors.OnSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Content based on demo type&#10;                when (project.demoType) {&#10;                    ProjectDemoType.IMAGE_ANALYSIS -&gt; ImageAnalysisDemo()&#10;                    ProjectDemoType.APP_BACKUP -&gt; AppBackupDemo()&#10;                    ProjectDemoType.GITHUB_LINK -&gt; GitHubLinkDemo(project)&#10;                    ProjectDemoType.LINK -&gt; GitHubLinkDemo(project)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ImageAnalysisDemo() {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Left side - Sample image&#10;        Column(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxHeight()&#10;        ) {&#10;            Text(&#10;                text = &quot;Sample Image&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;                    .background(DarculaColors.Background)&#10;                    .border(2.dp, DarculaColors.Primary),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Image,&#10;                        contentDescription = &quot;Sample Image&quot;,&#10;                        tint = DarculaColors.Primary,&#10;                        modifier = Modifier.size(64.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Sample Photo&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = DarculaColors.Comment&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Primary&#10;                ),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Analytics,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Analyze with Gemini Vision&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;&#10;        // Right side - Analysis result&#10;        Column(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxHeight()&#10;        ) {&#10;            Text(&#10;                text = &quot;Gemini Vision Analysis&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = DarculaColors.OnSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxSize(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = DarculaColors.Background&#10;                )&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier.padding(12.dp)&#10;                ) {&#10;                    item {&#10;                        Text(&#10;                            text = &quot;Analysis Results:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = DarculaColors.Keyword&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Object Detection: Mobile phone, person, indoor environment&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Scene Understanding: Technology demonstration in indoor setting&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Text Recognition: No visible text detected&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.OnBackground&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;• Confidence Score: 94.7%&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.Number&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        Text(&#10;                            text = &quot;Accessibility Description:&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = DarculaColors.Keyword&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        Text(&#10;                            text = &quot;\&quot;A person is holding a smartphone displaying an application interface. The setting appears to be indoors with good lighting, suitable for app demonstration purposes.\&quot;&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = DarculaColors.String&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AppBackupDemo() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;App Backup Manager&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Select apps to backup:&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        val sampleApps = listOf(&#10;            &quot;WhatsApp&quot; to true,&#10;            &quot;Instagram&quot; to false,&#10;            &quot;Gmail&quot; to true,&#10;            &quot;Chrome&quot; to false,&#10;            &quot;Spotify&quot; to true,&#10;            &quot;Netflix&quot; to false,&#10;            &quot;YouTube&quot; to true,&#10;            &quot;Maps&quot; to false&#10;        )&#10;&#10;        LazyColumn(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            items(sampleApps) { (appName, isSelected) -&gt;&#10;                var checked by remember { mutableStateOf(isSelected) }&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { checked = !checked }&#10;                        .padding(vertical = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Checkbox(&#10;                        checked = checked,&#10;                        onCheckedChange = { checked = it },&#10;                        colors = CheckboxDefaults.colors(&#10;                            checkedColor = DarculaColors.Primary,&#10;                            uncheckedColor = DarculaColors.Comment&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    Icon(&#10;                        imageVector = Icons.Default.Android,&#10;                        contentDescription = null,&#10;                        tint = DarculaColors.Primary,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                    Text(&#10;                        text = appName,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = DarculaColors.OnSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Primary&#10;                ),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CloudUpload,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Backup to Google Drive&quot;)&#10;            }&#10;&#10;            Button(&#10;                onClick = { /* Demo action */ },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = DarculaColors.Secondary&#10;                ),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CloudDownload,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Restore from Backup&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun GitHubLinkDemo(project: Project) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Code,&#10;            contentDescription = null,&#10;            tint = DarculaColors.Primary,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = project.name,&#10;            style = MaterialTheme.typography.displayMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = project.description,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = DarculaColors.OnSurface&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Tech Stack: ${project.techStack}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = DarculaColors.Comment&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = { /* Open GitHub link */ },&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = DarculaColors.Primary&#10;            )&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.OpenInNew,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;View on GitHub&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;androidx-lifecycle = &quot;2.9.1&quot;&#10;composeMultiplatform = &quot;1.8.2&quot;&#10;junit = &quot;4.13.2&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;&#10;[libraries]&#10;kotlin-test = { module = &quot;org.jetbrains.kotlin:kotlin-test&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-testJunit = { module = &quot;org.jetbrains.kotlin:kotlin-test-junit&quot;, version.ref = &quot;kotlin&quot; }&#10;junit = { module = &quot;junit:junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-lifecycle-viewmodelCompose = { module = &quot;org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose&quot;, version.ref = &quot;androidx-lifecycle&quot; }&#10;androidx-lifecycle-runtimeCompose = { module = &quot;org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose&quot;, version.ref = &quot;androidx-lifecycle&quot; }&#10;&#10;[plugins]&#10;composeMultiplatform = { id = &quot;org.jetbrains.compose&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;composeCompiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlinMultiplatform = { id = &quot;org.jetbrains.kotlin.multiplatform&quot;, version.ref = &quot;kotlin&quot; }" />
              <option name="updatedContent" value="[versions]&#10;androidx-lifecycle = &quot;2.9.1&quot;&#10;composeMultiplatform = &quot;1.8.2&quot;&#10;junit = &quot;4.13.2&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;&#10;[libraries]&#10;kotlin-test = { module = &quot;org.jetbrains.kotlin:kotlin-test&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-testJunit = { module = &quot;org.jetbrains.kotlin:kotlin-test-junit&quot;, version.ref = &quot;kotlin&quot; }&#10;junit = { module = &quot;junit:junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-lifecycle-viewmodelCompose = { module = &quot;org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose&quot;, version.ref = &quot;androidx-lifecycle&quot; }&#10;androidx-lifecycle-runtimeCompose = { module = &quot;org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose&quot;, version.ref = &quot;androidx-lifecycle&quot; }&#10;androidx-compose-ui = { module = &quot;androidx.compose.ui:ui&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-material = { module = &quot;androidx.compose.material:material&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-ui-tooling = { module = &quot;androidx.compose.ui:ui-tooling&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-runtime = { module = &quot;androidx.compose.runtime:runtime&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-foundation = { module = &quot;androidx.compose.foundation:foundation&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-layout = { module = &quot;androidx.compose.layout:layout&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-material-icons-core = { module = &quot;androidx.compose.material:material-icons-core&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-material-icons-extended = { module = &quot;androidx.compose.material:material-icons-extended&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;androidx-compose-navigation = { module = &quot;androidx.navigation:navigation-compose&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;&#10;[plugins]&#10;composeMultiplatform = { id = &quot;org.jetbrains.compose&quot;, version.ref = &quot;composeMultiplatform&quot; }&#10;composeCompiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlinMultiplatform = { id = &quot;org.jetbrains.kotlin.multiplatform&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>